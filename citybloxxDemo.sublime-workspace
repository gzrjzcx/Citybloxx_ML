{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ar",
				"args\tstring[]"
			],
			[
				"en",
				"Environment\tEnvironment"
			],
			[
				"to",
				"ToString()\tstring"
			],
			[
				"pow",
				"Power_P04_Reward(float distance)\tfloat"
			],
			[
				"cl",
				"Clamp01(float value)\tfloat"
			],
			[
				"gam",
				"gameObject\tGameObject"
			],
			[
				"get",
				"GetReward()\tfloat"
			],
			[
				"del",
				"stackDeltaX\tfloat"
			],
			[
				"top",
				"topPieceLocalPos\tVector3"
			],
			[
				"dro",
				"dropPieceLocalPos\tVector3"
			],
			[
				"re",
				"return\treturn"
			],
			[
				"Collision",
				"CollisionControl\tCollisionControl"
			],
			[
				"com",
				"ComputeReward(Vector3 dropPos)\tvoid"
			],
			[
				"agnet",
				"agentInfo\tagentInfo"
			],
			[
				"agent",
				"AgentInfo()\tAgentInfo()"
			],
			[
				"ag",
				"AgentReset()\tvoid"
			],
			[
				"is",
				"isJustCalledDone\tbool"
			],
			[
				"m",
				"MLAgents\tMLAgents"
			],
			[
				"a",
				"agentObj\tCBXPieceAgent"
			],
			[
				"CBX",
				"CBXAcademy\tCBXAcademy"
			],
			[
				"ve",
				"vectorAction\tfloat[]"
			],
			[
				"flto",
				"FloorToInt(float f)\tint"
			],
			[
				"pie",
				"piecePrefab\tGameObject"
			],
			[
				"tou",
				"touchCount\tint"
			],
			[
				"sta",
				"stackRange\tfloat"
			],
			[
				"fal",
				"false\tfalse"
			],
			[
				"ro",
				"rotation\tQuaternion"
			],
			[
				"fall",
				"fallenWaterAnim\tParticleSystem"
			],
			[
				"rot",
				"rotationYoffset\tfloat"
			],
			[
				"cam",
				"cameraPos\tVector3"
			],
			[
				"wor",
				"WorldToScreenPoint(Vector3 position)\tVector3"
			],
			[
				"pl",
				"PlayFallenWaterAnim(Vector3 pos)\tvoid"
			],
			[
				"colo",
				"Color\tColor"
			],
			[
				"loc",
				"localPosition\tVector3"
			],
			[
				"stop",
				"StopComboPeriodAnim()\tvoid"
			],
			[
				"p",
				"PlayStackDeadCenterAnim(Vector3 pos)\tvoid"
			],
			[
				"isp",
				"isPlaying\tbool"
			],
			[
				"tra",
				"transform\tTransform"
			],
			[
				"par",
				"ParticleSystem\tParticleSystem"
			],
			[
				"Par",
				"ParticleSystem\tParticleSystem"
			],
			[
				"sor",
				"sortingLayerName\tstring"
			],
			[
				"inex",
				"InExpo\tEase"
			],
			[
				"eas",
				"Ease\tEase"
			],
			[
				"loca",
				"localRotation\tQuaternion"
			],
			[
				"f",
				"From()\tTweener"
			],
			[
				"Tweene",
				"Tweener\tTweener"
			],
			[
				"l",
				"loopType\tLoopType"
			],
			[
				"A",
				"AppendCallback(TweenCallback callback)\tSequence"
			],
			[
				"pla",
				"PlayBackwards()\tvoid"
			],
			[
				"dotw",
				"DOTween\tDOTween"
			],
			[
				"s",
				"StopMotion(int motionFps, AnimationCurve animCurve)\tEaseFunction"
			],
			[
				"setsp",
				"SetSpeedBased(bool isSpeedBased)\tTweener"
			],
			[
				"Dotw",
				"doTween\tDoTweenControl"
			],
			[
				"Outqu",
				"OutQuart\tEase"
			],
			[
				"pi",
				"pivot\tVector3"
			],
			[
				"do",
				"DoPunchRotation\tDoPunchRotation"
			],
			[
				"pos",
				"position\tVector3"
			],
			[
				"dopunch",
				"DOPunchRotation(Vector3 punch, float duration)\tTweener"
			],
			[
				"collider",
				"Collider2D\tCollider2D"
			],
			[
				"rata",
				"RotateAround(Vector3 axis, float angle)\tvoid"
			],
			[
				"co",
				"collider\tCollider2D"
			],
			[
				"dolook",
				"DOLookAt(Vector3 towards, float duration, AxisConstraint axisConstraint = None, Vector3? up = null)\tTweener"
			],
			[
				"inouqu",
				"InOutQuart\tEase"
			],
			[
				"ouq",
				"OutQuart\tEase"
			],
			[
				"out",
				"OutQuart\tEase"
			],
			[
				"dopu",
				"DOPunchPosition(Vector3 punch, float duration)\tTweener"
			],
			[
				"ani",
				"StackingNoDeadCenterAnimation()\tvoid"
			],
			[
				"dopun",
				"DOPunchRotation(Vector3 punch, float duration)\tTweener"
			],
			[
				"sc",
				"localScale\tVector3"
			],
			[
				"set",
				"SetEase(Ease ease)\tTweenerCore<Quaternion, Vector3, QuaternionOptions>"
			],
			[
				"ob",
				"objPoolPos\tVector3"
			],
			[
				"sk",
				"skyObj_2\tGameObject"
			],
			[
				"ju",
				"DOJump(Vector3 endValue, float jumpPower, int numJumps, float duration)\tSequence"
			],
			[
				"dora",
				"DORotateQuaternion(Quaternion endValue, float duration)\tTweenerCore<Quaternion, Quaternion, NoOptions>"
			],
			[
				"G",
				"GO_Extensions\tGO_Extensions"
			],
			[
				"M",
				"Min()\tTransform"
			],
			[
				"for",
				"foreach\tforeach"
			],
			[
				"use",
				"UseAdjustableColumnSwinging()\tvoid"
			],
			[
				"coc",
				"ColumnSwingingCenterMoveUp()\tvoid"
			],
			[
				"an",
				"angleSpeed\tfloat"
			],
			[
				"ac",
				"constraintActive\tbool"
			],
			[
				"cons",
				"constraintSource\tConstraintSource"
			],
			[
				"getcom",
				"GetComponent<T>()\tT"
			],
			[
				"Getcom",
				"GetComponent<T>()\tT"
			],
			[
				"paren",
				"parentConstraints\tParentConstraints"
			],
			[
				"sl",
				"slingPosYOffsetDestination\tfloat"
			],
			[
				"game",
				"gameStatus\tGameStatus"
			],
			[
				"ex",
				"expectMoveDuration\tfloat"
			],
			[
				"ga",
				"gameStatus\tGameStatus"
			],
			[
				"waitfor",
				"WaitForSeconds(float seconds)\tWaitForSeconds(float seconds)"
			],
			[
				"t",
				"text\tstring"
			],
			[
				"ist",
				"isTimerEnd\tbool"
			],
			[
				"ti",
				"timerOffset\tfloat"
			],
			[
				"oncom",
				"OnComboTimingComplete()\tvoid"
			],
			[
				"Tim",
				"Timer\tTimer"
			],
			[
				"istim",
				"isTiming\tbool"
			],
			[
				"isti",
				"isTiming\tbool"
			],
			[
				"isTI",
				"isTimerStart\tbool"
			],
			[
				"tetarge",
				"timerTarget_\tfloat"
			],
			[
				"isre",
				"isRepeate_\tbool"
			],
			[
				"isI",
				"isIgnoreTimeScale_\tbool"
			],
			[
				"up",
				"updateEvent_\tUpdateEvent"
			],
			[
				"upd",
				"updateEvent_\tUpdateEvent"
			],
			[
				"ontim",
				"onTimerCompleted_\tCompleteEvent"
			],
			[
				"time",
				"timerTarget\tfloat"
			],
			[
				"Time",
				"Time_\tfloat"
			],
			[
				"istime",
				"isTimerStart\tbool"
			],
			[
				"clam",
				"Clamp(float value, float min, float max)\tfloat"
			],
			[
				"cheiffa",
				"checkFallenSide(float deltaX)\tvoid"
			],
			[
				"tr",
				"true\ttrue"
			],
			[
				"check",
				"CheckFirstPieceIfStacked()\tvoid"
			],
			[
				"ot",
				"otherCollider\tCollider2D"
			],
			[
				"scne",
				"SceneManager\tSceneManager"
			],
			[
				"mis",
				"missNum\tint"
			],
			[
				"si",
				"Sin(float f)\tfloat"
			],
			[
				"bo",
				"bottomRight\tVector3"
			],
			[
				"collisi",
				"Collision2D\tCollision2D"
			],
			[
				"con",
				"contactCount\tint"
			],
			[
				"po",
				"posSkyObj_2\tVector3"
			],
			[
				"sky",
				"skyObj_2\tGameObject"
			],
			[
				"getc",
				"GetComponent<T>()\tT"
			],
			[
				"Scmo",
				"ScreenMoveUp()\tvoid"
			],
			[
				"piece",
				"pieceObj\tPiece"
			],
			[
				"am",
				"amplitudeRotate\tfloat"
			],
			[
				"fix",
				"fixedDeltaTime\tfloat"
			],
			[
				"mat",
				"Mathf\tMathf"
			],
			[
				"rota",
				"rotateY\tfloat"
			],
			[
				"Math",
				"Mathf()\tMathf()"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MLAgents;\n\npublic class CBXPieceAgent : Agent\n{\n\tpublic Transform mlTarget;\n\tpublic Piece pieceObj;\n\tpublic Transform monitorObj;\n\tpublic bool isJustCalledDone;\n\tpublic int deadcenterCount = 0;\n\n\tpublic override void InitializeAgent()\n\t{\n\t\tisJustCalledDone = true;\t\t\n\t}\n\n\tpublic override void AgentReset()\n\t{\n\t\tHookNewPiece4ML();\n\t\tmlTarget.position = new Vector3(Random.value*4-2, -3.7f, 0);\n\t}\n\n\tpublic override void CollectObservations()\n\t{\n\t\tAddVectorObs(this.transform.position);\n\t\tAddVectorObs(mlTarget.position);\n\t}\n\n\tpublic override void AgentAction(float[] vectorAction, string textAction)\n\t{\n\t\t// Actions\n\t\tint dropSignal = Mathf.FloorToInt(vectorAction[0]);\n\t\tMonitor.Log(\"drop signal : \", dropSignal.ToString(), monitorObj);\n\t\tMonitor.Log(\"reward : \", GetCumulativeReward().ToString(), monitorObj);\n\t\tMonitor.Log(\"deadcenter num : \", deadcenterCount.ToString(), monitorObj);\n\t\tif(dropSignal == 1)\n\t\t{\n        \ttransform.parent = null;\n            Vector3 p = transform.position;\n            p.z = 0;\n            transform.position = p;\n        \ttransform.rotation = Quaternion.identity;\n        \tpieceObj.GetComponent<Rigidbody2D>().isKinematic = false;\n        \tpieceObj.isHooked = false;\n        \tisJustCalledDone = false;\n\t\t}\n\t}\n\n\tvoid FixedUpdate()\n\t{\n\t\tif(isJustCalledDone)\n\t\t{\n\t\t\tRequestDecision();\n\t\t\tDebug.DrawLine(mlTarget.transform.localPosition, GameControl.instance.mycolObj.dropPieceLocalPos,Color.red);\n\t\t}\n\t}\n\n    void HookNewPiece4ML()\n    {\n        this.transform.parent = null; // avoid x offset when hooking the piece from column\n        this.transform.position = new Vector3(0, -2.25f, 0);\n        this.transform.SetParent(GameControl.instance.slingObj.transform,false);\n        pieceObj.isHooked = true;\n        pieceObj.isStacked = false;\n        this.transform.GetComponent<Rigidbody2D>().isKinematic = true;\n    }\n\n    public void ComputeReward()\n    {\n    \tfloat absDelta = Mathf.Abs(this.transform.localPosition.x - mlTarget.transform.localPosition.x);\n    \tfloat reward = Power_P04_Reward(absDelta);\n    \tAddReward(reward);\n    \tMonitor.Log(\"DeltaX : \", absDelta, monitorObj);\n    \tDebug.Log(\"AbsDeltaX : \" + absDelta, monitorObj);\n    \tDebug.Log(\"Immidate reward : \"+reward.ToString() , gameObject);\n    }\n\n    private float Power_N2_Reward(float distance)\n    {\n    \tif(distance < 0.1)\n    \t\treturn 1f;\n    \telse if(distance < 2)\n    \t{\n    \t\treturn (1 / (distance * distance * 100));\n    \t}\n    \telse\n    \t\treturn 0f;\n    }\n\n    private float Power_P04_Reward(float distance)\n    {\n    \tfloat distance_max = 3f;\n    \tfloat reward = 1 - Mathf.Pow(distance / distance_max, 0.4f);\n    \treturn reward;\n    }\n}\n",
			"file": "Assets/Scripts/ML/CBXPieceAgent.cs",
			"file_size": 2831,
			"file_write_time": 132057939894077801,
			"settings":
			{
				"buffer_size": 2733,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"contents": "﻿using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\nusing static GO_Extensions;\n\npublic class GameControl : MonoBehaviour\n{\n\n\tpublic static GameControl instance;\n\n\tpublic PiecePool piecePoolObj;\n    public ColumnSwinging columnObj;\n    public ScreenMoveUp screenMoveUpObj;\n    public EllipticalOrbit slingObj;\n    public ComboControl comboControlObj;\n    public DoTweenControl doTweenObj;\n    public ParticleControl particleObj;\n    public MyCollisionControl mycolObj;\n    public CBXPieceAgent agentObj;\n    public CBXAcademy academyObj;\n\n    public Text scoreText;\n    public Text missText;\n    public GameObject gameOverText;\n    public GameObject columnGameObj;\n\n    public int populationScore = 0;\n    public int stackedPieceNum = 0;\n    public int missNum = 0;\n    public Vector3 seaLevel;\n\n    public enum GameStatus\n    {\n        GAME_READY = 0,  // Scene has been loaded, but game not start\n        GAME_START, // Game start, but first piece not fallen\n        GAME_RUNNING, // Game is running but not combo, the first piece has fallen\n        GAME_COMBO, // Game is running and in combo phase\n        GAME_OVER // Game is over.\n    }\n    public GameStatus gameStatus;\n\n    public bool isGameRunning\n    {\n        get {return (gameStatus == GameStatus.GAME_RUNNING \n            || gameStatus == GameStatus.GAME_COMBO);}\n    }\n\n    // Start is called before the first frame update\n    void Awake()\n    {\n        if(!instance)\n        {\n        \tinstance = this;\n        }else if(instance)\n        {\n        \tDestroy(gameObject);\n        }\n    }\n\n    void Start()\n    {\n        seaLevel = new Vector3(0, -10, 0);\n        gameStatus = GameStatus.GAME_START;\n    }\n\n    void Update()\n    {\n        if(gameStatus == GameStatus.GAME_OVER \n            && (Input.GetKeyDown(\"space\") || Input.touchCount > 0))\n        {\n            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            gameStatus = GameStatus.GAME_START; \n        }\n    }\n\n    public void OnPieceStacking()\n    {\n        PieceStacked();\n    }\n\n    public void AfterPieceStackingSuccessfully(bool isDeadCenter)\n    {\n        // CheckFirstPieceIfStacked();\n        // Scored();\n        // ScreenMoveUp();\n        // SetColumnSwinging();\n        // seaLevel.y++;\n\n        if(isDeadCenter)\n        {\n            gameStatus = GameStatus.GAME_COMBO;\n            agentObj.ComputeReward();\n            agentObj.Done();\n            agentObj.isJustCalledDone = true;\n            agentObj.deadcenterCount++;\n            // Debug.Log(\"isDeadCenter\");\n            // comboControlObj.Combo();\n            // columnObj.Set2ComboSwingingAmplitude();\n            // particleObj.PlayComboPeriodAnim();\n        }\n        else\n        {\n            agentObj.ComputeReward();\n            agentObj.Done();\n            agentObj.isJustCalledDone = true;\n            // Debug.Log(\"is Normal Stack\");\n        }\n        // else if(gameStatus == GameStatus.GAME_COMBO)\n        // {\n        //     comboControlObj.AddComboNum();            \n        // }\n    }\n\n    public void AfterPieceStackingFailed(int fallenSide)\n    {\n        agentObj.ComputeReward();\n        agentObj.Done();\n        agentObj.isJustCalledDone = true;\n        // Missed();\n        // CheckMissNum();\n        // screenMoveUpObj.ShakeCamera();\n        // Debug.Log(\"is Failed Stack\");\n    }\n\n    void PieceStacked()\n    {\n    \t// piecePoolObj.HookNewPiece();\n    }\n\n    void Scored()\n    {\n        stackedPieceNum++;\n        populationScore++;\n        scoreText.text = \"Score:\" + populationScore.ToString();\n    }\n\n    void Missed()\n    {\n        missNum++;\n        missText.text = \"Miss:\" + missNum.ToString();\n    }\n\n    void CheckMissNum()\n    {\n        if(missNum > 2)\n        {\n            gameOverText.SetActive(true);\n            if(gameStatus == GameStatus.GAME_COMBO)\n            {\n                comboControlObj.comboTimer.EndTiming();\n                comboControlObj.comboScored();\n            }\n            gameStatus = GameStatus.GAME_OVER;\n        }\n    }\n\n    void ScreenMoveUp()\n    {\n        screenMoveUpObj.MoveUp();\n    }\n\n    void CheckFirstPieceIfStacked()\n    {\n        if(gameStatus == GameStatus.GAME_START)\n        {\n            gameStatus = GameStatus.GAME_RUNNING;\n        }\n    }\n\n    void SetColumnSwinging()\n    {\n        columnObj.SwingingCenterMoveUp();\n        columnObj.AddAmplitudeRotate();\n        columnObj.SetAmplitudeIncrementAndMax();\n    }\n\n    // Use this to control the ideal distance\n    // void LockDistanceColumn2Sling()\n    // {\n    //     Debug.Log(columnObj.GetDistanceColumn2Sling);\n    //     if(!Mathf.Approximately(columnObj.initialDistance, \n    //         columnObj.GetDistanceColumn2Sling))\n    //         {\n    //             columnObj.transform.position = slingObj.transform.position \n    //                 - new Vector3(0, columnObj.initialDistance - slingObj.offsetY, 0);\n    //         }  \n    // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n",
			"file": "Assets/Scripts/GameControl.cs",
			"file_size": 5208,
			"file_write_time": 132057938129237123,
			"settings":
			{
				"buffer_size": 4997,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "Assets/Scripts/Utilities/Extension.cs",
			"settings":
			{
				"buffer_size": 2058,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MyCollisionControl : MonoBehaviour\n{\n\n    public Collider2D dropPieceCol;\n    public Collider2D topPieceCol;\n\n    // public Vector3 dropPiecePos;\n    // public Vector3 topPiecePos;\n    // public float deltaX;\n\n    public void SetCollisionInfo(Collision2D ctl)\n    {\n        dropPieceCol = ctl.otherCollider;\n        topPieceCol = ctl.collider;\n    }\n\n    public Vector3 dropPieceLocalPos\n    {\n        get {return dropPieceCol ? dropPieceCol.transform.localPosition : Vector3.zero;}\n    }\n\n    public Vector3 topPieceLocalPos\n    {\n        get {return topPieceCol ? topPieceCol.transform.localPosition : Vector3.zero;}\n    }\n\n    public float deltaX\n    {\n        get {return dropPieceLocalPos.x - topPieceLocalPos.x;}\n    }\n\n    public void GetColumnHeightIncrement()\n    {\n        float topPiecePosY = dropPieceLocalPos.y;\n        float dropPiecePosY = topPieceLocalPos.y;\n        GameControl.instance.columnObj.columnHeightIncrement = Mathf.Abs(dropPiecePosY - topPiecePosY);\n    }\n}\n",
			"file": "Assets/Scripts/MyCollisionControl.cs",
			"file_size": 1125,
			"file_write_time": 132056248447559672,
			"settings":
			{
				"buffer_size": 1080,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "Assets/ML_SourceFiles/config/trainer_config.yaml",
			"settings":
			{
				"buffer_size": 4996,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Piece : MonoBehaviour\n{\n    public DoTweenControl doTween;\n    public struct StackStatus\n    {\n        public bool isStackSuccessful;\n        public int fallenSide;\n        public bool isDeadCenter;\n    }\n    public StackStatus stackStatus;\n\n    public bool isHooked = false;\n    public bool isStacked = true;\n    public bool isFallen = false;\n\n    public float deadCenterRange = 0.08f;\n    public float stackRange = 0.5f;\n\n\tpublic Rigidbody2D rb2d;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        rb2d = GetComponent<Rigidbody2D>();\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n    \tif(isHooked)\n    \t{\n\t        if(Input.GetKeyDown(\"space\") || Input.touchCount > 0)\n\t        {\n\t        \ttransform.parent = null;\n                Vector3 p = transform.position;\n                p.z = 0;\n                transform.position = p;\n\t        \ttransform.rotation = Quaternion.identity;\n\t        \trb2d.isKinematic = false;\n\t        \tisHooked = false;\n\t        }\n    \t}\n    }\n\n    void OnCollisionEnter2D()\n    {\n        if(!isStacked)\n        {\n            GameControl.instance.OnPieceStacking();\n            rb2d.isKinematic = true;\n            rb2d.velocity = Vector3.zero;\n            Parent2Column();        \n        }\n    }\n\n    public void Parent2Column()\n    {\n        transform.SetParent(GameControl.instance.columnObj.transform, true);\n        // set the rotation for subObject using this way\n        transform.localEulerAngles = Vector3.zero;\n        rb2d.angularVelocity = 0;\n    }\n\n    void OnCollisionExit2D(Collision2D ctl)\n    {\n        GameControl.instance.mycolObj.SetCollisionInfo(ctl);\n        if(!isStacked)\n        {\n            GameControl.instance.mycolObj.GetColumnHeightIncrement();\n            if(CheckIfCanStack(ctl))\n            {\n                stackStatus.isStackSuccessful = true;\n                GameControl.instance.AfterPieceStackingSuccessfully(stackStatus.isDeadCenter);\n                // doTween.StackingNoDeadCenterAnimation(stackStatus.fallenSide, stackStatus.isDeadCenter);\n            }\n            else\n            {\n                stackStatus.isStackSuccessful = false;\n                GameControl.instance.AfterPieceStackingFailed(stackStatus.fallenSide);\n                // OnStackingFailed();\n            }\n        }\n        isStacked = true;\n    }\n\n    public bool CheckIfCanStack(Collision2D ctl)\n    {\n        float absDeltaX = Mathf.Abs(GameControl.instance.mycolObj.deltaX);\n\n        if(ctl.collider.gameObject.tag == \"Ground\")\n        {\n            return false;\n        }\n\n        checkFallenSide();\n        // doTween.GetDeltaXFromCollision(absDeltaX);\n       \n        if(absDeltaX < stackRange)\n        {\n            isFallen = false;\n            checkIfDeadCenter(absDeltaX, GameControl.instance.mycolObj.topPieceLocalPos.x, ctl.otherCollider);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n            //     + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop true\");\n            return true;\n        }\n        else \n        {\n            // checkFallenSide(deltaX);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n            //     + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop false\");\n            isFallen = true;\n            return false;\n        }\n    }\n\n    private void checkIfDeadCenter(float absDeltaX, float topPiecePosX, Collider2D other)\n    {\n        if(absDeltaX < deadCenterRange)\n        {\n            stackStatus.isDeadCenter = true;\n            Vector3 pos = other.transform.localPosition;\n            pos.x = topPiecePosX;\n            other.transform.localPosition = pos;\n            pos = other.transform.position;\n            pos.z -= 0.5f;\n            pos.y -= 0.5f;\n            // GameControl.instance.particleObj.PlayStackDeadCenterAnim(pos);\n            // GameControl.instance.particleObj.PlayComboPeriodAnim();\n        }\n        else\n        {\n            stackStatus.isDeadCenter = false;\n        }\n    }\n\n    private void checkFallenSide()\n    {\n        if(GameControl.instance.mycolObj.deltaX > 0)\n        {\n            stackStatus.fallenSide = 1;  // right side\n        }\n        else\n        {\n            stackStatus.fallenSide = -1;  // left side\n        }\n        // Debug.Log(\"fallen side = \" + stackStatus.fallenSide);\n    }\n\n    private void OnStackingFailed()\n    {\n        // transform.position = new Vector3(0, -10f, 0);\n        // GameControl.instance.doTweenObj.FallenAnimation(1); // cannot get the true transform\n        // doTween.FallenAnimation(stackStatus.fallenSide);\n        transform.parent = null;\n    }\n\n    void OnBecameInvisible()\n    {\n        // if(isFallen)\n        //     GameControl.instance.particleObj.PlayFallenWaterAnim(transform.position);\n    }\n}\n",
			"file": "Assets/Scripts/Piece.cs",
			"file_size": 5233,
			"file_write_time": 132056255176137379,
			"settings":
			{
				"buffer_size": 5064,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing static GO_Extensions;\n\npublic class ColumnSwinging : MonoBehaviour\n{\n\n\tpublic float amplitudeMove = 0.5f;\n\tpublic float amplitudeRotate;\n\tpublic float comboAmplitudeRotate = 1f;\n\tpublic float amplitudeIncrement = 0.5f;\n\tpublic float maxAmplitudeRotate = 15f;\n\tpublic Rigidbody2D rb2d;\n\n\t// public float idealDistanceColumn2Sling; //Todo: use this control distance\n\tpublic float columnHeightIncrement;\n\n\tprivate float angle;\n\tprivate float angularSpeed = 1f;\n\n\tvoid Start()\n\t{\n\t\tangle = 0;\n\t\trb2d = GetComponent<Rigidbody2D>();\n\t}\n\n\t// public float GetDistanceColumn2Sling\n\t// {\n\t// \tget {return GameControl.instance.slingObj.transform.position.y\n\t// \t\t\t+ GameControl.instance.slingObj.offsetY - transform.position.y;}\n\t// }\n\n\tbool IsColumnShouldRotate()\n\t{\n\t\tif(GameControl.instance.gameStatus != GameControl.GameStatus.GAME_OVER\n\t\t\t&& GameControl.instance.gameStatus != GameControl.GameStatus.GAME_START)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tvoid FixedUpdate()\n\t{\n\t\tif(IsColumnShouldRotate())\n\t\t{\n\t\t\t// transform.position = new Vector3(Mathf.PingPong(Time.time*speed, 2), transform.position.y, transform.position.z);\n\t\t\t// transform.position = new Vector3(Mathf.Cos(Time.time)*amplitudeMove, transform.position.y, transform.position.z);\n\t\t\trb2d.velocity = new Vector2(Mathf.Cos(Time.time)*amplitudeMove, 0);\n\t\t\ttransform.rotation = Quaternion.Euler(0,0,-Mathf.Sin(Time.time)*amplitudeRotate);\n\n\t\t\t// float swingingSpeed = Mathf.Cos(angle) * amplitudeRotate;\n\t\t\t// angle += angularSpeed * Time.fixedDeltaTime;\n\t\t\t// transform.RotateAround(swingingCenter, Vector3.forward, swingingSpeed * Time.fixedDeltaTime);\n\t\t\tDebug.DrawLine (new Vector3(0,-30,0), new Vector3(0,30,0),Color.red);\n\t\t\tDebug.DrawLine (new Vector3(transform.position.x,-30,0), new Vector3(transform.position.x,30,0),Color.yellow);\n\t\t\tDebug.DrawLine(new Vector3(GameControl.instance.seaLevel.x - 10, GameControl.instance.seaLevel.y, 0),\n\t\t\t new Vector3(GameControl.instance.seaLevel.x + 10, GameControl.instance.seaLevel.y, 0), Color.blue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\trb2d.velocity = Vector2.zero;\n\t\t}\n\t}\n\n\tpublic void SwingingCenterMoveUp()\n\t{\n\t\tif(GameControl.instance.stackedPieceNum >= GameControl.instance.piecePoolObj.piecePoolSize - 1)\n\t\t{\n\t\t\tVector3 _pos = transform.position;\n\t\t\t_pos.y += columnHeightIncrement;\n\t\t\ttransform.MoveOnlyParent(_pos);\n\t\t}\n\t}\n\n\tpublic void AddAmplitudeRotate()\n\t{\n\t\tif(amplitudeRotate < maxAmplitudeRotate)\n\t\t{\n\t\t\tamplitudeRotate += amplitudeIncrement;\n\t\t}\n\t}\n\n\tpublic void SetAmplitudeIncrementAndMax()\n\t{\n\t\tint totalPieces = GameControl.instance.populationScore;\n\t\tif(totalPieces < 100){\n\t\t\tamplitudeIncrement = 0.5f;\n\t\t\tmaxAmplitudeRotate = 7f;\n\t\t\tcomboAmplitudeRotate = 1f;\n\t\t}\n\t\telse if(totalPieces < 200){\n\t\t\tamplitudeIncrement = 1f;\n\t\t\tmaxAmplitudeRotate = 10f;\n\t\t\tcomboAmplitudeRotate = 2f;\n\t\t}\n\t\telse if(totalPieces < 300){\n\t\t\tamplitudeIncrement = 1.5f;\n\t\t\tmaxAmplitudeRotate = 13f;\n\t\t\tcomboAmplitudeRotate = 3f;\n\t\t}\n\t\telse{\n\t\t\tamplitudeIncrement = 2f;\n\t\t\tmaxAmplitudeRotate = 15f;\n\t\t\tcomboAmplitudeRotate = 5f;\n\t\t}\n\t}\n\n\tpublic void Set2ComboSwingingAmplitude()\n\t{\n\t\tif(amplitudeRotate > comboAmplitudeRotate * 2)\n\t\t{\n\t\t\tamplitudeRotate -= comboAmplitudeRotate;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tamplitudeRotate = comboAmplitudeRotate;\t\t\t\n\t\t}\n\t}\n\n\tpublic float GetCenterPostion()\n\t{\n\t\treturn transform.GetCenterPosition(1);\n\t}\n\n\tpublic void FlashColumnOnCombo()\n\t{\n\n\t}\n}\n",
			"file": "Assets/Scripts/ColumnSwinging.cs",
			"file_size": 3593,
			"file_write_time": 132057932572859512,
			"settings":
			{
				"buffer_size": 3458,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class ComboControl : MonoBehaviour\n{\n    \n\tpublic Slider comboSlider;\n    public Timer comboTimer;\n    public Text comboNumText;\n    public Text comboScoreText;\n    \n    public int comboNum = 0;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        comboTimer = Timer.createTimer(\"ComboTimer\");       \n    }\n\n    public void Combo()\n    {\n        AddComboNum();\n        comboSlider.gameObject.SetActive(true);\n        if(comboTimer.isTiming)\n        {\n            comboTimer.RestartTimerForCombo();\n        }\n        else\n            comboTimer.startTiming(5, OnComboTimingComplete, OnComboTimingProcess, true, false, false);\n    }\n\n    public void AddComboNum()\n    {\n        comboNum++;\n        comboNumText.text = \"X \" + comboNum.ToString();\n    }\n\n    void OnComboTimingComplete()\n    {\n        comboSlider.gameObject.SetActive(false);\n        GameControl.instance.gameStatus = GameControl.GameStatus.GAME_RUNNING;\n        comboScored();\n        GameControl.instance.particleObj.StopComboPeriodAnim();\n        comboNum = 0;\n    }\n\n    void OnComboTimingProcess(float p)\n    {\n        comboSlider.value = 1 - p;\n    }\n\n    public void comboScored()\n    {\n        comboScoreText.gameObject.SetActive(true);\n        int comboScore = comboNum * 3;\n        comboScoreText.text = \"+ \" + comboScore.ToString(); \n        GameControl.instance.populationScore += comboScore;\n        GameControl.instance.scoreText.text = \"Score:\" + GameControl.instance.populationScore.ToString();\n        Invoke(\"delayInactiveComboScoreText\", 1);\n    }\n\n    void delayInactiveComboScoreText()\n    {\n        comboScoreText.gameObject.SetActive(false);\n    }\n}\n",
			"file": "Assets/Scripts/ComboControl.cs",
			"file_size": 1848,
			"file_write_time": 132049975526685187,
			"settings":
			{
				"buffer_size": 1777,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"settings syn",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"sublimgdb",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"sublimegdb",
				"SublimeGDB: Start Debugging"
			],
			[
				"command",
				"Preferences: Terminal View: Palette Commands"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"oa",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"Markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"MarkDown",
				"Set Syntax: Markdown"
			],
			[
				"markdownlivepreview",
				"MarkdownLivePreview: Edit Custom CSS File"
			],
			[
				"markdown",
				"MarkdownLivePreview: Edit Custom CSS File"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control:soda",
				"Package Control: Install Local Dependency"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 358.0,
		"history":
		[
			"c",
			"clear",
			"subl_remote_edit s1702794 cirrus-msc.epcc.ed.ac.uk",
			"subl_remote_edit . s1702794@cirrus-msc.epcc.ed.ac.uk",
			"subl_remote_edit . s1702794@cirrus-msc.epcc.ed.ac.ul",
			"subl_remote_edit ALIAS",
			"subl_remote_edit",
			"subl_remote_edit ALIAS",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"> subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			" sb_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			" subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS, PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/alex/citybloxxDemo/Assets/Scripts",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities"
	],
	"file_history":
	[
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/CBXAcademy.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/CmdControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/Timer.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/DoTweenControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/CollisionControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Piece.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/PiecePool.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ScreenMoveUp.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/CBXSlingAgent.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/Extension.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ParticleControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/CitybloxxAcademy.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ML/Academy.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ColumnSwinging.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ComboControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/GameControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/EllipticalOrbit.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/comboControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Timer.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/StackingEffect.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/HingePush.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ForceToSwing.cs",
		"/Users/alex/citybloxxDemo/citybloxxDemo.sublime-project",
		"/Users/alex/Desktop/test.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/ScrollingObject.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/RepeatingBG.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/bird.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/GameControl.cs",
		"/Users/alex/Desktop/temp.py",
		"/Users/alex/Desktop/FB",
		"/Users/alex/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/D0B3D9B9-9DED-4374-A3E4-9A82C5161519/Edinburgh University charitable status.txt",
		"/Users/alex/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/CB257155-28D8-4FC3-B86D-8C98404FD4A0/s1702794.txt",
		"/Users/alex/Desktop/util.c",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/exp/icc_advisor.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/utils/runtime_result.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/utils/gprof_result.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/c_test/obj/ipo_out.optrpt",
		"/Users/alex/Desktop/cirrus/temp/MD/runtime_output/baseline/baseline-O0/baseline-O0_0.txt",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/pbs/icc_advisor.pbs",
		"/Users/alex/Desktop/cirrus/temp/MD/c_test/src/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/MD.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/Makefile",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/pbs/test.pbs",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/control.c",
		"/Users/alex/Desktop/cirrus/temp/MD/Test/diff-output.c",
		"/Users/alex/Desktop/cirrus/temp/MD/bench_c.o943845",
		"/Users/alex/Desktop/cirrus/temp/MD/C/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/MD.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/control.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/output.dat100",
		"/Users/alex/Desktop/cirrus/temp/MD/C/output.dat010",
		"/Users/alex/Desktop/cirrus/temp/MD/C/input.dat",
		"/Users/alex/Desktop/cirrus/temp/MD/C/profile_O0.txt",
		"/Users/alex/project_templete/src/main.c",
		"/Users/alex/Library/Application Support/Sublime Text 3/Packages/User/SublimeGDB.sublime-settings",
		"/Users/alex/Desktop/cirrus/temp/MD/report_words.md",
		"/Users/alex/Desktop/cirrus/.bash_profile",
		"/Users/alex/Desktop/cirrus/temp/MD/C/util.c",
		"/Users/alex/Desktop/cirrus/temp/MD/bench_c.pbs",
		"/Users/alex/Desktop/cirrus/temp/TP/cw2/backend.pbs",
		"/Users/alex/Desktop/cirrus/temp/MPI/cw/mppcw/cw/backend.pbs",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise4/IndependentQLearning/IndependentQLearning.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise3/Environment.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/DataInput.csv",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/RandomAgentExample/DiscretizedRandomAttackingController.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarloBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo.sh",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/QLearning/QLearningBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/UnitTestExample/ExampleUnitTest.py",
		"/Users/alex/Desktop/MonteCarloBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/DiscreteHFO/HFOAttackingPlayer.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/MonteCarlo.sh",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/MonteCarloBase.py",
		"/Users/alex/Desktop/cirrus/.bashrc",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise1/BellmanDPBase.py",
		"/Users/alex/Desktop/plot.py",
		"/Users/alex/Downloads/10.1007_978-3-642-27645-3_17.ris",
		"/Users/alex/Downloads/citation-265284198.txt",
		"/Users/alex/Downloads/S0747563216300188.txt",
		"/Users/alex/Downloads/S0747563216300188.ris",
		"/Users/alex/Downloads/CitationList.ris",
		"/Users/alex/Desktop/test_submit.sh",
		"/Users/alex/Downloads/alex_latex.txt",
		"/Users/alex/Downloads/10.1007_978-3-319-93000-8_81 (1).bib",
		"/Users/alex/Downloads/alex.txt",
		"/Users/alex/Desktop/mlp2019/src/builder.py",
		"/Users/alex/Desktop/mlp2019/mkfold/dsfold1.txt",
		"/Users/alex/Downloads/10.1007_978-3-319-93000-8_81.bib",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/acc.sh",
		"/Users/alex/Desktop/mlp_cluster/mlpractical/arg_extractor.py",
		"/Users/alex/Desktop/mlp_temp/irnv2_combo_all.sh",
		"/Users/alex/Desktop/mlp_temp/irnv2_patching_phase2.sh",
		"/Users/alex/Desktop/irnv2_combo_all.sh",
		"/Users/alex/Desktop/mlp2019/mkfold/mkfold.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/submit.sh",
		"/Users/alex/Desktop/install.sh",
		"/Users/alex/Downloads/irnv2_patching_phase2.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/data_handler.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/test_submit.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301961.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/test_submit.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/preprocessing.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/experiments/sliding_stride.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/experiments/sliding_dilation.sh",
		"/Users/alex/Desktop/mlp2019/patch_test/dump1.txt",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301526.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301531.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/builder.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/test.py",
		"/Users/alex/Desktop/mlp2019/src/data_handler.py",
		"/Users/alex/Desktop/mlp2019/src/plots.py",
		"/Users/alex/Desktop/mlp2019/data/fold1/X_train.pickle",
		"/Users/alex/Desktop/mlp2019/src/arg_extractor.py",
		"/Users/alex/Desktop/mlp2019/log.txt",
		"/Users/alex/Desktop/mlp2019/src/utilities.py",
		"/Users/alex/Desktop/draft.md",
		"/Users/alex/Desktop/project_templete/includes/resource.h",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/data/fold1/X_test.pickle",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-289048.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/baseline.py",
		"/Users/alex/.zim/modules/custom/functions/from keras.layers import Dense",
		"/Users/alex/.config/karabiner/assets/complex_modifications/1546877051.json",
		"/Users/alex/Documents/gitRepo/performance_programming/MD/C/util.c",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/腾讯天美-游戏客户端开发一面.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/dot-operator-Vs-arrow-operator.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/reference-Vs-pointer.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/pass-parameters-in-function.md"
	],
	"find":
	{
		"height": 50.0
	},
	"find_in_files":
	{
		"height": 132.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"transf",
			"screen",
			"move",
			"screen",
			"isstacked",
			"isfall",
			"particle",
			"pieceobj",
			"StackingNoDeadCenterAnimation",
			"PlayFallenWaterAnim",
			"FallenAnimation",
			"screenBottomPos",
			"sealevel",
			"particle",
			"log",
			");\n",
			"PositionToLastChild",
			"topPieceCollider",
			"timer",
			"SetColumnSwinging",
			"deadcenter",
			"dead",
			"stackedpieceNum",
			"stackedPieceNum",
			"stackedPiece",
			"pos",
			"stackpla",
			"speed",
			"isGameOver",
			"isFirstPieceStacked",
			"timerStart",
			"angle",
			"stackStatus",
			"MoveUp",
			"toppieceidx",
			"currentPiece",
			"currentPieceTag",
			"currentPiece",
			"pos"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"mlTarget",
			"timerStartTime",
			"currentPieceIdx",
			"currentPiece",
			"currentPieceTag"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Assets/Scripts/ML/CBXPieceAgent.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2733,
						"regions":
						{
						},
						"selection":
						[
							[
								2701,
								2701
							]
						],
						"settings":
						{
							"force_encoding": "GBK",
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "不需要的 using 指令。",
								"26,31": "不需要的 using 指令。",
								"2661,2662": "参数 1: 无法从“double”转换为“float”"
							},
							"origin_encoding": "GBK",
							"revert_to_scratch": true,
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1390.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/Scripts/GameControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4997,
						"regions":
						{
						},
						"selection":
						[
							[
								3271,
								3271
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,6": "不需要的 using 指令。",
								"137,142": "不需要的 using 指令。",
								"27,32": "不需要的 using 指令。",
								"3289,3295": "'“Transform”未包含“GetArg”的定义，并且找不到可接受第一个“Transform”类型参数的可访问扩展方法“GetArg”(是否缺少 using 指令或程序集引用?)"
							},
							"origin_content": "﻿using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\nusing static GO_Extensions;\n\npublic class GameControl : MonoBehaviour\n{\n\n\tpublic static GameControl instance;\n\n\tpublic PiecePool piecePoolObj;\n    public ColumnSwinging columnObj;\n    public ScreenMoveUp screenMoveUpObj;\n    public EllipticalOrbit slingObj;\n    public StackingEffect stackingEffectObj;\n    public ComboControl comboControlObj;\n\n    public Text scoreText;\n    public Text missText;\n    public GameObject gameOverText;\n    public GameObject columnGameObj;\n\n    public int populationScore = 0;\n    public int stackedPieceNum = 0;\n    public int missNum = 0;\n\n    public enum GameStatus\n    {\n        GAME_READY = 0,  // Scene has been loaded, but game not start\n        GAME_START, // Game start, but first piece not fallen\n        GAME_RUNNING, // Game is running but not combo, the first piece has fallen\n        GAME_COMBO, // Game is running and in combo phase\n        GAME_OVER // Game is over.\n    }\n    public GameStatus gameStatus = GameStatus.GAME_START;\n\n    public bool isGameRunning\n    {\n        get {return (gameStatus == GameStatus.GAME_RUNNING \n            || gameStatus == GameStatus.GAME_COMBO);}\n    }\n\n    // Start is called before the first frame update\n    void Awake()\n    {\n        if(!instance)\n        {\n        \tinstance = this;\n        }else if(instance)\n        {\n        \tDestroy(gameObject);\n        }\n    }\n\n    void Start()\n    {\n        gameStatus = GameStatus.GAME_START;\n    }\n\n    void Update()\n    {\n        if(gameStatus == GameStatus.GAME_OVER \n            && Input.GetKeyDown(\"space\"))\n        {\n            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            gameStatus = GameStatus.GAME_START; \n        }\n    }\n\n    public void OnPieceStacking()\n    {\n        PieceStacked();\n    }\n\n    public void AfterPieceStackingSuccessfully(bool isDeadCenter)\n    {\n        CheckFirstPieceIfStacked();\n        Scored();\n        ScreenMoveUp();\n        ColumnSwingingCenterMoveUp();\n        SetColumnSwinging();\n        if(isDeadCenter)\n        {\n            gameStatus = GameStatus.GAME_COMBO;\n            comboControlObj.Combo();\n            columnObj.Set2ComboSwingingAmplitude();\n        }\n        else if(gameStatus == GameStatus.GAME_COMBO)\n        {\n            comboControlObj.AddComboNum();            \n        }\n    }\n\n    public void AfterPieceStackingFailed(int fallenSide)\n    {\n        Missed();\n        CheckMissNum();\n    }\n\n    void PieceStacked()\n    {\n    \tpiecePoolObj.HookNewPiece();\n    }\n\n    void Scored()\n    {\n        stackedPieceNum++;\n        populationScore++;\n        scoreText.text = \"Score:\" + populationScore.ToString();\n    }\n\n    void Missed()\n    {\n        missNum++;\n        missText.text = \"Miss:\" + missNum.ToString();\n    }\n\n    void CheckMissNum()\n    {\n        if(missNum > 2)\n        {\n            gameOverText.SetActive(true);\n            if(gameStatus == GameStatus.GAME_COMBO)\n            {\n                comboControlObj.comboTimer.EndTiming();\n                comboControlObj.comboScored();\n            }\n            gameStatus = GameStatus.GAME_OVER;\n        }\n    }\n\n    void ScreenMoveUp()\n    {\n        screenMoveUpObj.MoveUp();\n    }\n\n    void CheckFirstPieceIfStacked()\n    {\n        if(gameStatus == GameStatus.GAME_START)\n        {\n            gameStatus = GameStatus.GAME_RUNNING;\n        }\n    }\n\n    void SetColumnSwinging()\n    {\n        columnObj.AddAmplitudeRotate();\n        columnObj.SetAmplitudeIncrementAndMax();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"revert_to_scratch": false,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2714.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/Scripts/Utilities/Extension.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2058,
						"regions":
						{
						},
						"selection":
						[
							[
								2011,
								2011
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 929.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/Scripts/MyCollisionControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1080,
						"regions":
						{
						},
						"selection":
						[
							[
								130,
								130
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "不需要的 using 指令。",
								"26,31": "不需要的 using 指令。",
								"390,393": "无法将类型“UnityEngine.Collider2D”隐式转换为“UnityEngine.GameObject”",
								"428,431": "无法将类型“UnityEngine.Collider2D”隐式转换为“UnityEngine.GameObject”"
							},
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class MyCollisionControl : MonoBehaviour\n{\n\n    public Collider2D dropPieceCol;\n    public Collider2D topPieceCol;\n\n    // public Vector3 dropPiecePos;\n    // public Vector3 topPiecePos;\n    // public float deltaX;\n\n    public void SetCollisionInfo(Collision2D ctl)\n    {\n        dropPieceCol = ctl.otherCollider;\n        topPieceCol = ctl.collider;\n    }\n\n    public Vector3 dropPieceLocalPos\n    {\n        get {return dropPieceCol ? dropPieceCol.transform.localPosition : Vector3.zero;}\n    }\n\n    public Vector3 topPieceLocalPos\n    {\n        get {return topPieceCol ? topPieceCol.transform.localPosition : Vector3.zero;}\n    }\n\n    public float deltaX\n    {\n        get {return dropPieceLocalPos.x - topPieceLocalPos.x;}\n    }\n\n    public void GetColumnHeightIncrement()\n    {\n        float topPiecePosY = dropPieceLocalPos.y;\n        float dropPiecePosY = topPieceLocalPos.y;\n        GameControl.instance.columnObj.columnHeightIncrement = Mathf.Abs(dropPiecePosY - topPiecePosY);\n    }\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/ML_SourceFiles/config/trainer_config.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4996,
						"regions":
						{
						},
						"selection":
						[
							[
								511,
								511
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 5,
					"file": "Assets/Scripts/Piece.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5064,
						"regions":
						{
						},
						"selection":
						[
							[
								4475,
								4475
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "不需要的 using 指令。",
								"26,31": "不需要的 using 指令。",
								"4336,4342": "当前上下文中不存在名称“colObj”"
							},
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Piece : MonoBehaviour\n{\n\n    public struct StackStatus\n    {\n        public bool isStackSuccessful;\n        public int fallenSide;\n        public bool isDeadCenter;\n    }\n    public StackStatus stackStatus;\n\n    public bool isHooked = false;\n    public bool isStacked = true;\n    public float deadCenterRange = 0.15f;\n\n\tprivate Rigidbody2D rb2d;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        rb2d = GetComponent<Rigidbody2D>();\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n    \tif(isHooked)\n    \t{\n\t        if(Input.GetKeyDown(\"space\"))\n\t        {\n\t        \ttransform.parent = null;\n                Vector3 p = transform.position;\n                p.z = 0;\n                transform.position = p;\n\t        \ttransform.rotation = Quaternion.Euler(0,0,0);\n\t        \trb2d.isKinematic = false;\n\t        \tisHooked = false;\n\t        }\n    \t}\n    }\n\n    void OnCollisionEnter2D()\n    {\n        if(!isStacked)\n        {\n            GameControl.instance.OnPieceStacking();\n            rb2d.isKinematic = true;\n            rb2d.velocity = Vector3.zero;\n            parent2Column();        \n        }\n    }\n\n    void parent2Column()\n    {\n        transform.SetParent(GameControl.instance.columnObj.transform, true);\n        // set the rotation for subObject using this way\n        transform.localEulerAngles = Vector3.zero;\n        rb2d.angularVelocity = 0;\n    }\n\n    void OnCollisionExit2D(Collision2D ctl)\n    {\n        if(!isStacked && ctl.collider.gameObject.tag == \"Piece\")\n        {\n            if(checkIfCanStack(ctl))\n            {\n                stackStatus.isStackSuccessful = true;\n                GameControl.instance.AfterPieceStackingSuccessfully(stackStatus.isDeadCenter);\n            }\n            else\n            {\n                stackStatus.isStackSuccessful = false;\n                GameControl.instance.AfterPieceStackingFailed(stackStatus.fallenSide);\n                transform.position = new Vector3(0, -10f, 0);\n            }\n        }\n        isStacked = true;\n    }\n\n    private bool checkIfCanStack(Collision2D ctl)\n    {\n        float topPiecePosX = ctl.collider.transform.localPosition.x;\n        float dropPiecePosX = ctl.otherCollider.transform.localPosition.x;\n        float deltaX = dropPiecePosX - topPiecePosX;\n        float absDeltaX = Mathf.Abs(deltaX);\n        \n        if(absDeltaX < 0.5)\n        {\n            checkIfDeadCenter(absDeltaX, topPiecePosX, ctl.otherCollider);\n            Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n                + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop true\");\n            return true;\n        }\n        else \n        {\n            checkFallenSide(deltaX);\n            Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n                + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop false\");\n            return false;\n        }\n    }\n\n    private void checkIfDeadCenter(float absDeltaX, float topPiecePosX, Collider2D other)\n    {\n        if(absDeltaX < deadCenterRange)\n        {\n            stackStatus.isDeadCenter = true;\n            Vector3 pos = other.transform.localPosition;\n            pos.x = topPiecePosX;\n            other.transform.localPosition = pos;\n        }\n        else\n        {\n            stackStatus.isDeadCenter = false;\n        }\n    }\n\n    private void checkFallenSide(float deltaX)\n    {\n        if(deltaX > 0)\n        {\n            stackStatus.fallenSide = 1;\n        }\n        else\n        {\n            stackStatus.fallenSide = -1;\n        }\n        // Debug.Log(\"fallen side = \" + stackStatus.fallenSide);\n    }\n\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"revert_to_scratch": true,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/Scripts/ColumnSwinging.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3458,
						"regions":
						{
						},
						"selection":
						[
							[
								611,
								611
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "不需要的 using 指令。",
								"26,31": "不需要的 using 指令。",
								"3200,3216": "'“ColumnSwinging.GetCenterPostion()”: 并非所有的代码路径都返回值",
								"79,84": "不需要的 using 指令。"
							},
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ColumnSwinging : MonoBehaviour\n{\n\n\tpublic int totalStacked;\n\tpublic float swingSpeed;\n\tpublic float maxAngle;\n\tpublic int swinger;\n\n\tpublic float amplitudeMove = 0.5f;\n\tpublic float amplitudeRotate = 1f;\n\n\tpublic Rigidbody2D rb2d;\n\n\tprivate float maxSwingingAngle = 5f;\n\tprivate float minSwingingAngle = -5f;\n\tprivate float angle;\n\tprivate Vector3 pos;\n\n\tint stackPlacement;\n\tbool rotateRight;\n\n\tvoid Start()\n\t{\n\t\tangle = 0;\n\t\trb2d = GetComponent<Rigidbody2D>();\n\t}\n\n\tbool IsColumnShouldRotate()\n\t{\n\t\tif(GameControl.instance.gameStatus != GameControl.GameStatus.GAME_OVER\n\t\t\t&& GameControl.instance.gameStatus != GameControl.GameStatus.GAME_START)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tvoid FixedUpdate()\n\t{\n\t\tif(IsColumnShouldRotate())\n\t\t{\n\t\t\t// transform.position = new Vector3(Mathf.PingPong(Time.time*speed, 2), transform.position.y, transform.position.z);\n\t\t\trb2d.velocity = new Vector2(Mathf.Cos(Time.time)*amplitudeMove, 0);\n\t\t\t// transform.position = new Vector3(Mathf.Cos(Time.time)*amplitudeMove, transform.position.y, transform.position.z);\n\t\t\ttransform.rotation = Quaternion.Euler(0,0,-Mathf.Sin(Time.time)*amplitudeRotate);\n\t\t\tDebug.DrawLine (new Vector3(0,-30,0), new Vector3(0,30,0),Color.red);\n\t\t\tDebug.DrawLine (new Vector3(transform.position.x,-30,0), new Vector3(transform.position.x,30,0),Color.yellow);\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\trb2d.velocity = Vector2.zero;\n\t\t}\n\t}\n\n\tpublic void getAmplitudeMove()\n\t{\n\t\t\n\t}\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"revert_to_scratch": false,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Assets/Scripts/ComboControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1777,
						"regions":
						{
						},
						"selection":
						[
							[
								1145,
								1145
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class ComboControl : MonoBehaviour\n{\n    \n\tpublic Slider comboSlider;\n    public Timer comboTimer;\n    public Text comboNumText;\n    public Text comboScoreText;\n    \n    public int comboNum = 0;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        comboTimer = Timer.createTimer(\"ComboTimer\");       \n    }\n\n    public void Combo()\n    {\n        AddComboNum();\n        comboSlider.gameObject.SetActive(true);\n        if(comboTimer.isTiming)\n        {\n            comboTimer.RestartTimerForCombo();\n        }\n        else\n            comboTimer.startTiming(5, OnComboTimingComplete, OnComboTimingProcess, true, false, false);\n    }\n\n    public void AddComboNum()\n    {\n        comboNum++;\n        comboNumText.text = \"X \" + comboNum.ToString();\n    }\n\n    void OnComboTimingComplete()\n    {\n        comboSlider.gameObject.SetActive(false);\n        GameControl.instance.gameStatus = GameControl.GameStatus.GAME_RUNNING;\n        comboScored();\n        GameControl.instance.particleObj.StopComboPeriodAnim();\n        comboNum = 0;\n    }\n\n    void OnComboTimingProcess(float p)\n    {\n        comboSlider.value = 1 - p;\n    }\n\n    public void comboScored()\n    {\n        comboScoreText.gameObject.SetActive(true);\n        int comboScore = comboNum * 3;\n        comboScoreText.text = \"+ \" + comboScore.ToString(); \n        GameControl.instance.populationScore += comboScore;\n        GameControl.instance.scoreText.text = \"Score:\" + GameControl.instance.populationScore.ToString();\n        Invoke(\"delayInactiveComboScoreText\", 1);\n    }\n\n    void delayInactiveComboScoreText()\n    {\n        comboScoreText.gameObject.SetActive(false);\n    }\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 37.0
	},
	"input":
	{
		"height": 50.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.470831593467,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 157.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.variable_get":
	{
		"height": 157.0
	},
	"pinned_build_system": "",
	"project": "citybloxxDemo.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Remote Edit: Open Remote File Prompt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 227.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
