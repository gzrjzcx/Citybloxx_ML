{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"wor",
				"WorldToScreenPoint(Vector3 position)\tVector3"
			],
			[
				"gam",
				"gameObject\tGameObject"
			],
			[
				"pl",
				"PlayFallenWaterAnim(Vector3 pos)\tvoid"
			],
			[
				"colo",
				"Color\tColor"
			],
			[
				"loc",
				"localPosition\tVector3"
			],
			[
				"to",
				"topPieceCollider\tCollider2D"
			],
			[
				"stop",
				"StopComboPeriodAnim()\tvoid"
			],
			[
				"p",
				"PlayStackDeadCenterAnim(Vector3 pos)\tvoid"
			],
			[
				"isp",
				"isPlaying\tbool"
			],
			[
				"fal",
				"fallenWaterAnim\tParticleSystem"
			],
			[
				"tra",
				"transform\tTransform"
			],
			[
				"is",
				"isPlaying\tbool"
			],
			[
				"par",
				"ParticleSystem\tParticleSystem"
			],
			[
				"Par",
				"ParticleSystem\tParticleSystem"
			],
			[
				"sor",
				"sortingLayerName\tstring"
			],
			[
				"inex",
				"InExpo\tEase"
			],
			[
				"eas",
				"Ease\tEase"
			],
			[
				"loca",
				"localRotation\tQuaternion"
			],
			[
				"ro",
				"rotation\tQuaternion"
			],
			[
				"f",
				"From()\tTweener"
			],
			[
				"Tweene",
				"Tweener\tTweener"
			],
			[
				"l",
				"loopType\tLoopType"
			],
			[
				"A",
				"AppendCallback(TweenCallback callback)\tSequence"
			],
			[
				"pla",
				"PlayBackwards()\tvoid"
			],
			[
				"dotw",
				"DOTween\tDOTween"
			],
			[
				"s",
				"StopMotion(int motionFps, AnimationCurve animCurve)\tEaseFunction"
			],
			[
				"setsp",
				"SetSpeedBased(bool isSpeedBased)\tTweener"
			],
			[
				"Dotw",
				"doTween\tDoTweenControl"
			],
			[
				"Outqu",
				"OutQuart\tEase"
			],
			[
				"pi",
				"pivot\tVector3"
			],
			[
				"do",
				"DoPunchRotation\tDoPunchRotation"
			],
			[
				"pos",
				"position\tVector3"
			],
			[
				"dopunch",
				"DOPunchRotation(Vector3 punch, float duration)\tTweener"
			],
			[
				"collider",
				"Collider2D\tCollider2D"
			],
			[
				"rata",
				"RotateAround(Vector3 axis, float angle)\tvoid"
			],
			[
				"co",
				"collider\tCollider2D"
			],
			[
				"dolook",
				"DOLookAt(Vector3 towards, float duration, AxisConstraint axisConstraint = None, Vector3? up = null)\tTweener"
			],
			[
				"inouqu",
				"InOutQuart\tEase"
			],
			[
				"ouq",
				"OutQuart\tEase"
			],
			[
				"out",
				"OutQuart\tEase"
			],
			[
				"dopu",
				"DOPunchPosition(Vector3 punch, float duration)\tTweener"
			],
			[
				"ani",
				"StackingNoDeadCenterAnimation()\tvoid"
			],
			[
				"dopun",
				"DOPunchRotation(Vector3 punch, float duration)\tTweener"
			],
			[
				"sc",
				"localScale\tVector3"
			],
			[
				"set",
				"SetEase(Ease ease)\tTweenerCore<Quaternion, Vector3, QuaternionOptions>"
			],
			[
				"ob",
				"objPoolPos\tVector3"
			],
			[
				"sk",
				"skyObj_2\tGameObject"
			],
			[
				"cam",
				"cameraObj\tGameObject"
			],
			[
				"ju",
				"DOJump(Vector3 endValue, float jumpPower, int numJumps, float duration)\tSequence"
			],
			[
				"dora",
				"DORotateQuaternion(Quaternion endValue, float duration)\tTweenerCore<Quaternion, Quaternion, NoOptions>"
			],
			[
				"G",
				"GO_Extensions\tGO_Extensions"
			],
			[
				"M",
				"Min()\tTransform"
			],
			[
				"for",
				"foreach\tforeach"
			],
			[
				"del",
				"fixedDeltaTime\tfloat"
			],
			[
				"use",
				"UseAdjustableColumnSwinging()\tvoid"
			],
			[
				"coc",
				"ColumnSwingingCenterMoveUp()\tvoid"
			],
			[
				"an",
				"angleSpeed\tfloat"
			],
			[
				"ac",
				"constraintActive\tbool"
			],
			[
				"cons",
				"constraintSource\tConstraintSource"
			],
			[
				"getcom",
				"GetComponent<T>()\tT"
			],
			[
				"Getcom",
				"GetComponent<T>()\tT"
			],
			[
				"paren",
				"parentConstraints\tParentConstraints"
			],
			[
				"sl",
				"slingPosYOffsetDestination\tfloat"
			],
			[
				"game",
				"gameStatus\tGameStatus"
			],
			[
				"ex",
				"expectMoveDuration\tfloat"
			],
			[
				"ga",
				"gameStatus\tGameStatus"
			],
			[
				"com",
				"comboScoreText\tText"
			],
			[
				"waitfor",
				"WaitForSeconds(float seconds)\tWaitForSeconds(float seconds)"
			],
			[
				"t",
				"text\tstring"
			],
			[
				"ist",
				"isTimerEnd\tbool"
			],
			[
				"ti",
				"timerOffset\tfloat"
			],
			[
				"oncom",
				"OnComboTimingComplete()\tvoid"
			],
			[
				"Tim",
				"Timer\tTimer"
			],
			[
				"istim",
				"isTiming\tbool"
			],
			[
				"isti",
				"isTiming\tbool"
			],
			[
				"isTI",
				"isTimerStart\tbool"
			],
			[
				"tetarge",
				"timerTarget_\tfloat"
			],
			[
				"isre",
				"isRepeate_\tbool"
			],
			[
				"isI",
				"isIgnoreTimeScale_\tbool"
			],
			[
				"up",
				"updateEvent_\tUpdateEvent"
			],
			[
				"upd",
				"updateEvent_\tUpdateEvent"
			],
			[
				"ontim",
				"onTimerCompleted_\tCompleteEvent"
			],
			[
				"time",
				"timerTarget\tfloat"
			],
			[
				"Time",
				"Time_\tfloat"
			],
			[
				"istime",
				"isTimerStart\tbool"
			],
			[
				"clam",
				"Clamp(float value, float min, float max)\tfloat"
			],
			[
				"cheiffa",
				"checkFallenSide(float deltaX)\tvoid"
			],
			[
				"ve",
				"Vector3\tVector3"
			],
			[
				"tr",
				"true\ttrue"
			],
			[
				"sta",
				"stackStatus\tstackStatus"
			],
			[
				"check",
				"CheckFirstPieceIfStacked()\tvoid"
			],
			[
				"ot",
				"otherCollider\tCollider2D"
			],
			[
				"scne",
				"SceneManager\tSceneManager"
			],
			[
				"mis",
				"missNum\tint"
			],
			[
				"si",
				"Sin(float f)\tfloat"
			],
			[
				"bo",
				"bottomRight\tVector3"
			],
			[
				"get",
				"GetContact(int index)\tContactPoint2D"
			],
			[
				"collisi",
				"Collision2D\tCollision2D"
			],
			[
				"con",
				"contactCount\tint"
			],
			[
				"po",
				"posSkyObj_2\tVector3"
			],
			[
				"sky",
				"skyObj_2\tGameObject"
			],
			[
				"getc",
				"GetComponent<T>()\tT"
			],
			[
				"Scmo",
				"ScreenMoveUp()\tvoid"
			],
			[
				"piece",
				"pieceObj\tPiece"
			],
			[
				"am",
				"amplitudeRotate\tfloat"
			],
			[
				"fix",
				"fixedDeltaTime\tfloat"
			],
			[
				"mat",
				"Mathf\tMathf"
			],
			[
				"rota",
				"rotateY\tfloat"
			],
			[
				"Math",
				"Mathf()\tMathf()"
			],
			[
				"V",
				"Vector3()\tVector3()"
			],
			[
				"vec",
				"Vector3\tVector3"
			],
			[
				"vel",
				"velocityThreshold"
			],
			[
				"colu",
				"columnMaxY"
			],
			[
				"spa",
				"spawnInterval"
			],
			[
				"col",
				"columns"
			],
			[
				"T",
				"scoreText"
			],
			[
				"grou",
				"groundHLeangth"
			],
			[
				"gro",
				"groundOffset"
			],
			[
				"gr",
				"groundCollider"
			],
			[
				"Game",
				"GameObject"
			],
			[
				"qop",
				"qopt-report"
			],
			[
				"sum",
				"sum3"
			],
			[
				"N",
				"Nbody"
			],
			[
				"de",
				"delta_pos"
			],
			[
				"te",
				"tempz"
			],
			[
				"tem",
				"tempy"
			],
			[
				"j",
				"j_total_force"
			],
			[
				"coll",
				"collisions"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "ï»¿using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\nusing static GO_Extensions;\n\npublic class GameControl : MonoBehaviour\n{\n\n\tpublic static GameControl instance;\n\n\tpublic PiecePool piecePoolObj;\n    public ColumnSwinging columnObj;\n    public ScreenMoveUp screenMoveUpObj;\n    public EllipticalOrbit slingObj;\n    public ComboControl comboControlObj;\n    public DoTweenControl doTweenObj;\n    public ParticleControl particleObj;\n\n    public Text scoreText;\n    public Text missText;\n    public GameObject gameOverText;\n    public GameObject columnGameObj;\n\n    public int populationScore = 0;\n    public int stackedPieceNum = 0;\n    public int missNum = 0;\n    public Vector3 seaLevel;\n\n    public enum GameStatus\n    {\n        GAME_READY = 0,  // Scene has been loaded, but game not start\n        GAME_START, // Game start, but first piece not fallen\n        GAME_RUNNING, // Game is running but not combo, the first piece has fallen\n        GAME_COMBO, // Game is running and in combo phase\n        GAME_OVER // Game is over.\n    }\n    public GameStatus gameStatus;\n\n    public bool isGameRunning\n    {\n        get {return (gameStatus == GameStatus.GAME_RUNNING \n            || gameStatus == GameStatus.GAME_COMBO);}\n    }\n\n    // Start is called before the first frame update\n    void Awake()\n    {\n        if(!instance)\n        {\n        \tinstance = this;\n        }else if(instance)\n        {\n        \tDestroy(gameObject);\n        }\n    }\n\n    void Start()\n    {\n        seaLevel = new Vector3(0, -10, 0);\n        gameStatus = GameStatus.GAME_START;\n    }\n\n    void Update()\n    {\n        if(gameStatus == GameStatus.GAME_OVER \n            && Input.GetKeyDown(\"space\"))\n        {\n            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            gameStatus = GameStatus.GAME_START; \n        }\n    }\n\n    public void OnPieceStacking()\n    {\n        PieceStacked();\n    }\n\n    public void AfterPieceStackingSuccessfully(bool isDeadCenter)\n    {\n        CheckFirstPieceIfStacked();\n        Scored();\n        ScreenMoveUp();\n        SetColumnSwinging();\n        seaLevel.y++;\n        if(isDeadCenter)\n        {\n            gameStatus = GameStatus.GAME_COMBO;\n            comboControlObj.Combo();\n            columnObj.Set2ComboSwingingAmplitude();\n            particleObj.PlayComboPeriodAnim();\n        }\n        else if(gameStatus == GameStatus.GAME_COMBO)\n        {\n            comboControlObj.AddComboNum();            \n        }\n    }\n\n    public void AfterPieceStackingFailed(int fallenSide)\n    {\n        Missed();\n        // CheckMissNum();\n        screenMoveUpObj.ShakeCamera();\n    }\n\n    void PieceStacked()\n    {\n    \tpiecePoolObj.HookNewPiece();\n    }\n\n    void Scored()\n    {\n        stackedPieceNum++;\n        populationScore++;\n        scoreText.text = \"Score:\" + populationScore.ToString();\n    }\n\n    void Missed()\n    {\n        missNum++;\n        missText.text = \"Miss:\" + missNum.ToString();\n    }\n\n    void CheckMissNum()\n    {\n        if(missNum > 2)\n        {\n            gameOverText.SetActive(true);\n            if(gameStatus == GameStatus.GAME_COMBO)\n            {\n                comboControlObj.comboTimer.EndTiming();\n                comboControlObj.comboScored();\n            }\n            gameStatus = GameStatus.GAME_OVER;\n        }\n    }\n\n    void ScreenMoveUp()\n    {\n        screenMoveUpObj.MoveUp();\n    }\n\n    void CheckFirstPieceIfStacked()\n    {\n        if(gameStatus == GameStatus.GAME_START)\n        {\n            gameStatus = GameStatus.GAME_RUNNING;\n        }\n    }\n\n    void SetColumnSwinging()\n    {\n        columnObj.SwingingCenterMoveUp();\n        columnObj.AddAmplitudeRotate();\n        columnObj.SetAmplitudeIncrementAndMax();\n    }\n\n    // Use this to control the ideal distance\n    // void LockDistanceColumn2Sling()\n    // {\n    //     Debug.Log(columnObj.GetDistanceColumn2Sling);\n    //     if(!Mathf.Approximately(columnObj.initialDistance, \n    //         columnObj.GetDistanceColumn2Sling))\n    //         {\n    //             columnObj.transform.position = slingObj.transform.position \n    //                 - new Vector3(0, columnObj.initialDistance - slingObj.offsetY, 0);\n    //         }  \n    // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n",
			"file": "Assets/Scripts/GameControl.cs",
			"file_size": 4479,
			"file_write_time": 132050133388153705,
			"settings":
			{
				"buffer_size": 4288,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing DG.Tweening;\n\npublic class ScreenMoveUp : MonoBehaviour\n{\n\n\tpublic GameObject skyObj_1;\n\tpublic GameObject skyObj_2;\n\tpublic GameObject cameraObj;\n\n\tpublic float pieceSize = 1f;\n\tpublic float backgroundHeight = 10f;\n\tpublic float moveSpeed = 2f;\n\n\tprivate float slingMoveStep;\n\tprivate Vector3 cameraDestination;\n\tprivate float slingPosYOffsetDestination;\n\n\tpublic Vector3 screenBottomPos\n\t{\n\t\tget {return Vector3.Min(skyObj_1.transform.position, skyObj_2.transform.position);}\n\t}\n\n\tvoid FixedUpdate()\n\t{\n\t\tif(GameControl.instance.isGameRunning)\n\t\t{\n\t\t\tcameraObj.transform.position = Vector3.MoveTowards(\n\t\t\t\tcameraObj.transform.position, cameraDestination, moveSpeed*Time.fixedDeltaTime);\n\t\t\tGameControl.instance.slingObj.offsetY = Mathf.MoveTowards(\n\t\t\t\tGameControl.instance.slingObj.offsetY, slingPosYOffsetDestination, moveSpeed*Time.fixedDeltaTime);\n\t\t}\n\t\t\n\t}\n\n\tpublic void MoveUp()\n\t{\n\t\tBackgroundMoveUp();\n\t\tSetCameraMoveDestination();\n\t\tSetSlingMoveDestination();\n\t}\n\n\tprivate void SetCameraMoveDestination()\n\t{\n\t\tcameraDestination = cameraObj.transform.position;\n\t\tcameraDestination.y += GameControl.instance.columnObj.columnHeightIncrement;\n\t}\n\n\tprivate void SetSlingMoveDestination()\n\t{\n\t\tslingPosYOffsetDestination = GameControl.instance.slingObj.offsetY;\n\t\tslingPosYOffsetDestination += GameControl.instance.columnObj.columnHeightIncrement;\n\t}\n\n\tprivate void BackgroundMoveUp()\n\t{\n\t\tVector3 posSkyObj_1 = skyObj_1.transform.position;\n\t\tVector3 posSkyObj_2 = skyObj_2.transform.position;\n\t\tVector3 posCamera = cameraObj.transform.position;\n\n\t\tif(posSkyObj_1.y < posSkyObj_2.y)\n\t\t{\n\t\t\tif(posCamera.y - posSkyObj_2.y >= 0)\n\t\t\t{\n\t\t\t\tposSkyObj_1.y += 2 * backgroundHeight;\n\t\t\t\tskyObj_1.transform.position = posSkyObj_1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(posCamera.y - posSkyObj_1.y >= 0)\n\t\t\t{\n\t\t\t\tposSkyObj_2.y += 2 * backgroundHeight;\n\t\t\t\tskyObj_2.transform.position = posSkyObj_2;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void ShakeCamera()\n\t{\n\t\tcameraObj.transform.DOShakePosition(0.5f, new Vector3(0.1f, 0.1f, 0), 50, 60);\n\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n",
			"file": "Assets/Scripts/ScreenMoveUp.cs",
			"file_size": 2213,
			"file_write_time": 132047544968553122,
			"settings":
			{
				"buffer_size": 2111,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "Assets/Scripts/PiecePool.cs",
			"settings":
			{
				"buffer_size": 1420,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/Scripts/Utilities/Extension.cs",
			"settings":
			{
				"buffer_size": 1260,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Piece : MonoBehaviour\n{\n    public DoTweenControl doTween;\n    public struct StackStatus\n    {\n        public bool isStackSuccessful;\n        public int fallenSide;\n        public bool isDeadCenter;\n    }\n    public StackStatus stackStatus;\n\n    public bool isHooked = false;\n    public bool isStacked = true;\n    public float deadCenterRange = 0.1f;\n\n\tprivate Rigidbody2D rb2d;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        rb2d = GetComponent<Rigidbody2D>();\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n    \tif(isHooked)\n    \t{\n\t        if(Input.GetKeyDown(\"space\"))\n\t        {\n\t        \ttransform.parent = null;\n                Vector3 p = transform.position;\n                p.z = 0;\n                transform.position = p;\n\t        \ttransform.rotation = Quaternion.Euler(0,0,0);\n\t        \trb2d.isKinematic = false;\n\t        \tisHooked = false;\n\t        }\n    \t}\n    }\n\n    void OnCollisionEnter2D()\n    {\n        if(!isStacked)\n        {\n            GameControl.instance.OnPieceStacking();\n            rb2d.isKinematic = true;\n            rb2d.velocity = Vector3.zero;\n            parent2Column();        \n        }\n    }\n\n    void parent2Column()\n    {\n        transform.SetParent(GameControl.instance.columnObj.transform, true);\n        // set the rotation for subObject using this way\n        transform.localEulerAngles = Vector3.zero;\n        rb2d.angularVelocity = 0;\n    }\n\n    void OnCollisionExit2D(Collision2D ctl)\n    {\n        if(!isStacked && ctl.collider.gameObject.tag == \"Piece\")\n        {\n            GetColumnHeightIncrement(ctl);\n            if(checkIfCanStack(ctl))\n            {\n                stackStatus.isStackSuccessful = true;\n                GameControl.instance.AfterPieceStackingSuccessfully(stackStatus.isDeadCenter);\n                doTween.StackingNoDeadCenterAnimation(stackStatus.fallenSide);\n            }\n            else\n            {\n                stackStatus.isStackSuccessful = false;\n                GameControl.instance.AfterPieceStackingFailed(stackStatus.fallenSide);\n                OnStackingFailed();\n            }\n        }\n        isStacked = true;\n    }\n\n    private void GetColumnHeightIncrement(Collision2D ctl)\n    {\n        float topPiecePosY = ctl.collider.transform.localPosition.y;\n        float dropPiecePosY = ctl.otherCollider.transform.localPosition.y;\n        GameControl.instance.columnObj.columnHeightIncrement = Mathf.Abs(dropPiecePosY - topPiecePosY);\n        GameControl.instance.columnObj.topPieceCollider = ctl.collider;\n    }\n\n    private bool checkIfCanStack(Collision2D ctl)\n    {\n        float topPiecePosX = ctl.collider.transform.localPosition.x;\n        float dropPiecePosX = ctl.otherCollider.transform.localPosition.x;\n        float deltaX = dropPiecePosX - topPiecePosX;\n        float absDeltaX = Mathf.Abs(deltaX);\n\n        checkFallenSide(deltaX);\n        doTween.GetDeltaXFromCollision(absDeltaX);\n       \n        if(absDeltaX < 0.6)\n        {\n            checkIfDeadCenter(absDeltaX, topPiecePosX, ctl.otherCollider);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n                // + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop true\");\n            return true;\n        }\n        else \n        {\n            // checkFallenSide(deltaX);\n            // Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n                // + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop false\");\n            return false;\n        }\n    }\n\n    private void checkIfDeadCenter(float absDeltaX, float topPiecePosX, Collider2D other)\n    {\n        if(absDeltaX < deadCenterRange)\n        {\n            stackStatus.isDeadCenter = true;\n            Vector3 pos = other.transform.localPosition;\n            pos.x = topPiecePosX;\n            other.transform.localPosition = pos;\n            pos = other.transform.position;\n            pos.z -= 0.5f;\n            pos.y -= 0.5f;\n            GameControl.instance.particleObj.PlayStackDeadCenterAnim(pos);\n            // GameControl.instance.particleObj.PlayComboPeriodAnim();\n        }\n        else\n        {\n            stackStatus.isDeadCenter = false;\n        }\n    }\n\n    private void checkFallenSide(float deltaX)\n    {\n        if(deltaX > 0)\n        {\n            stackStatus.fallenSide = 1;  // right side\n        }\n        else\n        {\n            stackStatus.fallenSide = -1;  // left side\n        }\n        // Debug.Log(\"fallen side = \" + stackStatus.fallenSide);\n    }\n\n    private void OnStackingFailed()\n    {\n        // transform.position = new Vector3(0, -10f, 0);\n        // GameControl.instance.doTweenObj.FallenAnimation(1); // cannot get the true transform\n        doTween.FallenAnimation(stackStatus.fallenSide);\n        transform.parent = null;\n    }\n\n    void OnBecameInvisible()\n    {\n        Debug.Log(\"OnBecameInvisable\", gameObject);\n        GameControl.instance.particleObj.PlayFallenWaterAnim(transform.position);\n    }\n}\n",
			"file": "Assets/Scripts/Piece.cs",
			"file_size": 5416,
			"file_write_time": 132050166197765285,
			"settings":
			{
				"buffer_size": 5247,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "Assets/Scripts/ParticleControl.cs",
			"settings":
			{
				"buffer_size": 1440,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing static GO_Extensions;\n\npublic class ColumnSwinging : MonoBehaviour\n{\n\n\tpublic float amplitudeMove = 0.5f;\n\tpublic float amplitudeRotate;\n\tpublic float comboAmplitudeRotate = 1f;\n\tpublic float amplitudeIncrement = 0.5f;\n\tpublic float maxAmplitudeRotate = 15f;\n\tpublic Rigidbody2D rb2d;\n\n\t// public float idealDistanceColumn2Sling; //Todo: use this control distance\n\tpublic float columnHeightIncrement;\n\tpublic Collider2D topPieceCollider;  //collision2d.collider\n\n\tprivate float angle;\n\tprivate float angularSpeed = 1f;\n\n\tvoid Start()\n\t{\n\t\tangle = 0;\n\t\trb2d = GetComponent<Rigidbody2D>();\n\t}\n\n\t// public float GetDistanceColumn2Sling\n\t// {\n\t// \tget {return GameControl.instance.slingObj.transform.position.y\n\t// \t\t\t+ GameControl.instance.slingObj.offsetY - transform.position.y;}\n\t// }\n\n\tbool IsColumnShouldRotate()\n\t{\n\t\tif(GameControl.instance.gameStatus != GameControl.GameStatus.GAME_OVER\n\t\t\t&& GameControl.instance.gameStatus != GameControl.GameStatus.GAME_START)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tvoid FixedUpdate()\n\t{\n\t\tif(IsColumnShouldRotate())\n\t\t{\n\t\t\t// transform.position = new Vector3(Mathf.PingPong(Time.time*speed, 2), transform.position.y, transform.position.z);\n\t\t\t// transform.position = new Vector3(Mathf.Cos(Time.time)*amplitudeMove, transform.position.y, transform.position.z);\n\t\t\trb2d.velocity = new Vector2(Mathf.Cos(Time.time)*amplitudeMove, 0);\n\t\t\ttransform.rotation = Quaternion.Euler(0,0,-Mathf.Sin(Time.time)*amplitudeRotate);\n\n\t\t\t// float swingingSpeed = Mathf.Cos(angle) * amplitudeRotate;\n\t\t\t// angle += angularSpeed * Time.fixedDeltaTime;\n\t\t\t// transform.RotateAround(swingingCenter, Vector3.forward, swingingSpeed * Time.fixedDeltaTime);\n\t\t\tDebug.DrawLine (new Vector3(0,-30,0), new Vector3(0,30,0),Color.red);\n\t\t\tDebug.DrawLine (new Vector3(transform.position.x,-30,0), new Vector3(transform.position.x,30,0),Color.yellow);\n\t\t\tDebug.DrawLine(new Vector3(GameControl.instance.seaLevel.x - 10, GameControl.instance.seaLevel.y, 0),\n\t\t\t new Vector3(GameControl.instance.seaLevel.x + 10, GameControl.instance.seaLevel.y, 0), Color.blue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\trb2d.velocity = Vector2.zero;\n\t\t}\n\t}\n\n\tpublic void SwingingCenterMoveUp()\n\t{\n\t\tif(GameControl.instance.stackedPieceNum >= GameControl.instance.piecePoolObj.piecePoolSize - 1)\n\t\t{\n\t\t\tVector3 _pos = transform.position;\n\t\t\t_pos.y += columnHeightIncrement;\n\t\t\ttransform.MoveOnlyParent(_pos);\n\t\t}\n\t}\n\n\tpublic void AddAmplitudeRotate()\n\t{\n\t\tif(amplitudeRotate < maxAmplitudeRotate)\n\t\t{\n\t\t\tamplitudeRotate += amplitudeIncrement;\n\t\t}\n\t}\n\n\tpublic void SetAmplitudeIncrementAndMax()\n\t{\n\t\tint totalPieces = GameControl.instance.populationScore;\n\t\tif(totalPieces < 100){\n\t\t\tamplitudeIncrement = 0.5f;\n\t\t\tmaxAmplitudeRotate = 7f;\n\t\t\tcomboAmplitudeRotate = 1f;\n\t\t}\n\t\telse if(totalPieces < 200){\n\t\t\tamplitudeIncrement = 1f;\n\t\t\tmaxAmplitudeRotate = 10f;\n\t\t\tcomboAmplitudeRotate = 2f;\n\t\t}\n\t\telse if(totalPieces < 300){\n\t\t\tamplitudeIncrement = 1.5f;\n\t\t\tmaxAmplitudeRotate = 13f;\n\t\t\tcomboAmplitudeRotate = 3f;\n\t\t}\n\t\telse{\n\t\t\tamplitudeIncrement = 2f;\n\t\t\tmaxAmplitudeRotate = 15f;\n\t\t\tcomboAmplitudeRotate = 5f;\n\t\t}\n\t}\n\n\tpublic void Set2ComboSwingingAmplitude()\n\t{\n\t\tif(amplitudeRotate > comboAmplitudeRotate * 2)\n\t\t{\n\t\t\tamplitudeRotate -= comboAmplitudeRotate;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tamplitudeRotate = comboAmplitudeRotate;\t\t\t\n\t\t}\n\t}\n\n\tpublic float GetCenterPostion()\n\t{\n\t\treturn transform.GetCenterPosition(1);\n\t}\n\n\tpublic void FlashColumnOnCombo()\n\t{\n\n\t}\n}\n",
			"file": "Assets/Scripts/ColumnSwinging.cs",
			"file_size": 3655,
			"file_write_time": 132050124139555217,
			"settings":
			{
				"buffer_size": 3519,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "Assets/Scripts/Utilities/DoTweenControl.cs",
			"settings":
			{
				"buffer_size": 3241,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/Scripts/Utilities/Timer.cs",
			"settings":
			{
				"buffer_size": 3694,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/Scripts/ComboControl.cs",
			"settings":
			{
				"buffer_size": 1777,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"settings syn",
				"Preferences: Settings â Syntax Specific"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"sublimgdb",
				"Preferences: SublimeGDB Settings â User"
			],
			[
				"sublimegdb",
				"SublimeGDB: Start Debugging"
			],
			[
				"command",
				"Preferences: Terminal View: Palette Commands"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"oa",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"Markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"MarkDown",
				"Set Syntax: Markdown"
			],
			[
				"markdownlivepreview",
				"MarkdownLivePreview: Edit Custom CSS File"
			],
			[
				"markdown",
				"MarkdownLivePreview: Edit Custom CSS File"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control:soda",
				"Package Control: Install Local Dependency"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 358.0,
		"history":
		[
			"c",
			"clear",
			"subl_remote_edit s1702794 cirrus-msc.epcc.ed.ac.uk",
			"subl_remote_edit . s1702794@cirrus-msc.epcc.ed.ac.uk",
			"subl_remote_edit . s1702794@cirrus-msc.epcc.ed.ac.ul",
			"subl_remote_edit ALIAS",
			"subl_remote_edit",
			"subl_remote_edit ALIAS",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"> subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			" sb_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			" subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS, PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"subl_remote_edit",
			"subl_remote_edit ALIAS PATH_ON_REMOTE_MACHINE",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/alex/citybloxxDemo/Assets/Scripts"
	],
	"file_history":
	[
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/DoTweenControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/Extension.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ColumnSwinging.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ComboControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/GameControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/EllipticalOrbit.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/comboControl.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Utilities/Timer.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/Timer.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ScreenMoveUp.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/StackingEffect.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/HingePush.cs",
		"/Users/alex/citybloxxDemo/Assets/Scripts/ForceToSwing.cs",
		"/Users/alex/citybloxxDemo/citybloxxDemo.sublime-project",
		"/Users/alex/Desktop/test.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/ScrollingObject.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/RepeatingBG.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/bird.cs",
		"/Users/alex/FlappyBird/Assets/FlappyBirdStyleAssets/Scripts/GameControl.cs",
		"/Users/alex/Desktop/temp.py",
		"/Users/alex/Desktop/FB",
		"/Users/alex/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/D0B3D9B9-9DED-4374-A3E4-9A82C5161519/Edinburgh University charitable status.txt",
		"/Users/alex/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/CB257155-28D8-4FC3-B86D-8C98404FD4A0/s1702794.txt",
		"/Users/alex/Desktop/util.c",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/exp/icc_advisor.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/utils/runtime_result.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/utils/gprof_result.sh",
		"/Users/alex/Desktop/cirrus/temp/MD/c_test/obj/ipo_out.optrpt",
		"/Users/alex/Desktop/cirrus/temp/MD/runtime_output/baseline/baseline-O0/baseline-O0_0.txt",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/pbs/icc_advisor.pbs",
		"/Users/alex/Desktop/cirrus/temp/MD/c_test/src/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/MD.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/Makefile",
		"/Users/alex/Desktop/cirrus/temp/MD/scripts/pbs/test.pbs",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/src/control.c",
		"/Users/alex/Desktop/cirrus/temp/MD/Test/diff-output.c",
		"/Users/alex/Desktop/cirrus/temp/MD/bench_c.o943845",
		"/Users/alex/Desktop/cirrus/temp/MD/C/coord.h",
		"/Users/alex/Desktop/cirrus/temp/MD/C/MD.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/control.c",
		"/Users/alex/Desktop/cirrus/temp/MD/C/output.dat100",
		"/Users/alex/Desktop/cirrus/temp/MD/C/output.dat010",
		"/Users/alex/Desktop/cirrus/temp/MD/C/input.dat",
		"/Users/alex/Desktop/cirrus/temp/MD/C/profile_O0.txt",
		"/Users/alex/project_templete/src/main.c",
		"/Users/alex/Library/Application Support/Sublime Text 3/Packages/User/SublimeGDB.sublime-settings",
		"/Users/alex/Desktop/cirrus/temp/MD/report_words.md",
		"/Users/alex/Desktop/cirrus/.bash_profile",
		"/Users/alex/Desktop/cirrus/temp/MD/C/util.c",
		"/Users/alex/Desktop/cirrus/temp/MD/bench_c.pbs",
		"/Users/alex/Desktop/cirrus/temp/TP/cw2/backend.pbs",
		"/Users/alex/Desktop/cirrus/temp/MPI/cw/mppcw/cw/backend.pbs",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise4/IndependentQLearning/IndependentQLearning.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise3/Environment.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/DataInput.csv",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/RandomAgentExample/DiscretizedRandomAttackingController.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarloBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo.sh",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/QLearning/QLearningBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/UnitTestExample/ExampleUnitTest.py",
		"/Users/alex/Desktop/MonteCarloBase.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/DiscreteHFO/HFOAttackingPlayer.py",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/MonteCarlo.sh",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise2/MonteCarlo/MonteCarloBase.py",
		"/Users/alex/Desktop/cirrus/.bashrc",
		"/Users/alex/Desktop/HFO/example/RL2019-BaseCodes/Exercise1/BellmanDPBase.py",
		"/Users/alex/Desktop/plot.py",
		"/Users/alex/Downloads/10.1007_978-3-642-27645-3_17.ris",
		"/Users/alex/Downloads/citation-265284198.txt",
		"/Users/alex/Downloads/S0747563216300188.txt",
		"/Users/alex/Downloads/S0747563216300188.ris",
		"/Users/alex/Downloads/CitationList.ris",
		"/Users/alex/Desktop/test_submit.sh",
		"/Users/alex/Downloads/alex_latex.txt",
		"/Users/alex/Downloads/10.1007_978-3-319-93000-8_81 (1).bib",
		"/Users/alex/Downloads/alex.txt",
		"/Users/alex/Desktop/mlp2019/src/builder.py",
		"/Users/alex/Desktop/mlp2019/mkfold/dsfold1.txt",
		"/Users/alex/Downloads/10.1007_978-3-319-93000-8_81.bib",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/acc.sh",
		"/Users/alex/Desktop/mlp_cluster/mlpractical/arg_extractor.py",
		"/Users/alex/Desktop/mlp_temp/irnv2_combo_all.sh",
		"/Users/alex/Desktop/mlp_temp/irnv2_patching_phase2.sh",
		"/Users/alex/Desktop/irnv2_combo_all.sh",
		"/Users/alex/Desktop/mlp2019/mkfold/mkfold.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/submit.sh",
		"/Users/alex/Desktop/install.sh",
		"/Users/alex/Downloads/irnv2_patching_phase2.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/data_handler.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/test_submit.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301961.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/test_submit.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/preprocessing.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/experiments/sliding_stride.sh",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/scripts/experiments/sliding_dilation.sh",
		"/Users/alex/Desktop/mlp2019/patch_test/dump1.txt",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301526.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-301531.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/builder.py",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/test.py",
		"/Users/alex/Desktop/mlp2019/src/data_handler.py",
		"/Users/alex/Desktop/mlp2019/src/plots.py",
		"/Users/alex/Desktop/mlp2019/data/fold1/X_train.pickle",
		"/Users/alex/Desktop/mlp2019/src/arg_extractor.py",
		"/Users/alex/Desktop/mlp2019/log.txt",
		"/Users/alex/Desktop/mlp2019/src/utilities.py",
		"/Users/alex/Desktop/draft.md",
		"/Users/alex/Desktop/project_templete/includes/resource.h",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/data/fold1/X_test.pickle",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/slurm-289048.out",
		"/Users/alex/Desktop/mlp_cluster/mlp2019/src/baseline.py",
		"/Users/alex/.zim/modules/custom/functions/from keras.layers import Dense",
		"/Users/alex/.config/karabiner/assets/complex_modifications/1546877051.json",
		"/Users/alex/Documents/gitRepo/performance_programming/MD/C/util.c",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/è¾è®¯å¤©ç¾-æ¸¸æå®¢æ·ç«¯å¼åä¸é¢.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/dot-operator-Vs-arrow-operator.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/reference-Vs-pointer.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/pass-parameters-in-function.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/c-preprocess.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/charPointer-VS-charArray.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/subposts_c/c-memory-layout.md",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/source/_posts/c-memory-layout.md",
		"/Users/alex/Desktop/test.c",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/_config.yml",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/themes/next/source/css/_schemes/Mist/_logo.styl",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/themes/next/layout/_custom/head.swig",
		"/Users/alex/Documents/gitRepo/gzrjzcx.github.io/blog/themes/next/layout/index.swig"
	],
	"find":
	{
		"height": 50.0
	},
	"find_in_files":
	{
		"height": 132.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sealevel",
			"particle",
			"log",
			");\n",
			"PositionToLastChild",
			"topPieceCollider",
			"timer",
			"SetColumnSwinging",
			"deadcenter",
			"dead",
			"stackedpieceNum",
			"stackedPieceNum",
			"stackedPiece",
			"pos",
			"stackpla",
			"speed",
			"isGameOver",
			"isFirstPieceStacked",
			"timerStart",
			"angle",
			"stackStatus",
			"MoveUp",
			"toppieceidx",
			"currentPiece",
			"currentPieceTag",
			"currentPiece",
			"pos"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"timerStartTime",
			"currentPieceIdx",
			"currentPiece",
			"currentPieceTag"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Assets/Scripts/GameControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4288,
						"regions":
						{
						},
						"selection":
						[
							[
								1589,
								1589
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,6": "ä¸éè¦ç using æä»¤ã",
								"137,142": "ä¸éè¦ç using æä»¤ã",
								"27,32": "ä¸éè¦ç using æä»¤ã",
								"3820,3843": "'âColumnSwingingâæªåå«âGetDistanceColumn2Slingâçå®ä¹ï¼å¹¶ä¸æ¾ä¸å°å¯æ¥åç¬¬ä¸ä¸ªâColumnSwingingâç±»ååæ°çå¯è®¿é®æ©å±æ¹æ³âGetDistanceColumn2Slingâ(æ¯å¦ç¼ºå° using æä»¤æç¨åºéå¼ç¨?)",
								"3888,3903": "'âColumnSwingingâæªåå«âinitialDistanceâçå®ä¹ï¼å¹¶ä¸æ¾ä¸å°å¯æ¥åç¬¬ä¸ä¸ªâColumnSwingingâç±»ååæ°çå¯è®¿é®æ©å±æ¹æ³âinitialDistanceâ(æ¯å¦ç¼ºå° using æä»¤æç¨åºéå¼ç¨?)",
								"3928,3951": "'âColumnSwingingâæªåå«âGetDistanceColumn2Slingâçå®ä¹ï¼å¹¶ä¸æ¾ä¸å°å¯æ¥åç¬¬ä¸ä¸ªâColumnSwingingâç±»ååæ°çå¯è®¿é®æ©å±æ¹æ³âGetDistanceColumn2Slingâ(æ¯å¦ç¼ºå° using æä»¤æç¨åºéå¼ç¨?)",
								"4091,4106": "'âColumnSwingingâæªåå«âinitialDistanceâçå®ä¹ï¼å¹¶ä¸æ¾ä¸å°å¯æ¥åç¬¬ä¸ä¸ªâColumnSwingingâç±»ååæ°çå¯è®¿é®æ©å±æ¹æ³âinitialDistanceâ(æ¯å¦ç¼ºå° using æä»¤æç¨åºéå¼ç¨?)"
							},
							"origin_content": "ï»¿using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\nusing static GO_Extensions;\n\npublic class GameControl : MonoBehaviour\n{\n\n\tpublic static GameControl instance;\n\n\tpublic PiecePool piecePoolObj;\n    public ColumnSwinging columnObj;\n    public ScreenMoveUp screenMoveUpObj;\n    public EllipticalOrbit slingObj;\n    public StackingEffect stackingEffectObj;\n    public ComboControl comboControlObj;\n\n    public Text scoreText;\n    public Text missText;\n    public GameObject gameOverText;\n    public GameObject columnGameObj;\n\n    public int populationScore = 0;\n    public int stackedPieceNum = 0;\n    public int missNum = 0;\n\n    public enum GameStatus\n    {\n        GAME_READY = 0,  // Scene has been loaded, but game not start\n        GAME_START, // Game start, but first piece not fallen\n        GAME_RUNNING, // Game is running but not combo, the first piece has fallen\n        GAME_COMBO, // Game is running and in combo phase\n        GAME_OVER // Game is over.\n    }\n    public GameStatus gameStatus = GameStatus.GAME_START;\n\n    public bool isGameRunning\n    {\n        get {return (gameStatus == GameStatus.GAME_RUNNING \n            || gameStatus == GameStatus.GAME_COMBO);}\n    }\n\n    // Start is called before the first frame update\n    void Awake()\n    {\n        if(!instance)\n        {\n        \tinstance = this;\n        }else if(instance)\n        {\n        \tDestroy(gameObject);\n        }\n    }\n\n    void Start()\n    {\n        gameStatus = GameStatus.GAME_START;\n    }\n\n    void Update()\n    {\n        if(gameStatus == GameStatus.GAME_OVER \n            && Input.GetKeyDown(\"space\"))\n        {\n            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            gameStatus = GameStatus.GAME_START; \n        }\n    }\n\n    public void OnPieceStacking()\n    {\n        PieceStacked();\n    }\n\n    public void AfterPieceStackingSuccessfully(bool isDeadCenter)\n    {\n        CheckFirstPieceIfStacked();\n        Scored();\n        ScreenMoveUp();\n        ColumnSwingingCenterMoveUp();\n        SetColumnSwinging();\n        if(isDeadCenter)\n        {\n            gameStatus = GameStatus.GAME_COMBO;\n            comboControlObj.Combo();\n            columnObj.Set2ComboSwingingAmplitude();\n        }\n        else if(gameStatus == GameStatus.GAME_COMBO)\n        {\n            comboControlObj.AddComboNum();            \n        }\n    }\n\n    public void AfterPieceStackingFailed(int fallenSide)\n    {\n        Missed();\n        CheckMissNum();\n    }\n\n    void PieceStacked()\n    {\n    \tpiecePoolObj.HookNewPiece();\n    }\n\n    void Scored()\n    {\n        stackedPieceNum++;\n        populationScore++;\n        scoreText.text = \"Score:\" + populationScore.ToString();\n    }\n\n    void Missed()\n    {\n        missNum++;\n        missText.text = \"Miss:\" + missNum.ToString();\n    }\n\n    void CheckMissNum()\n    {\n        if(missNum > 2)\n        {\n            gameOverText.SetActive(true);\n            if(gameStatus == GameStatus.GAME_COMBO)\n            {\n                comboControlObj.comboTimer.EndTiming();\n                comboControlObj.comboScored();\n            }\n            gameStatus = GameStatus.GAME_OVER;\n        }\n    }\n\n    void ScreenMoveUp()\n    {\n        screenMoveUpObj.MoveUp();\n    }\n\n    void CheckFirstPieceIfStacked()\n    {\n        if(gameStatus == GameStatus.GAME_START)\n        {\n            gameStatus = GameStatus.GAME_RUNNING;\n        }\n    }\n\n    void SetColumnSwinging()\n    {\n        columnObj.AddAmplitudeRotate();\n        columnObj.SetAmplitudeIncrementAndMax();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"revert_to_scratch": true,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/Scripts/ScreenMoveUp.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2111,
						"regions":
						{
						},
						"selection":
						[
							[
								1437,
								1437
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"26,31": "ä¸éè¦ç using æä»¤ã",
								"489,496": "æ æ³å°ç±»åâUnityEngine.Vector3âéå¼è½¬æ¢ä¸ºâfloatâ"
							},
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ScreenMoveUp : MonoBehaviour\n{\n\n\tpublic GameObject skyObj_1;\n\tpublic GameObject skyObj_2;\n\tpublic GameObject cameraObj;\n\n\tpublic float pieceSize = 1f;\n\tpublic float backgroundHeight = 10f;\n\tpublic float moveSpeed = 2f;\n\n\tprivate float slingMoveStep;\n\tprivate Vector3 cameraDestination;\n\tprivate float slingPosYOffsetDestination;\n\n\tvoid FixedUpdate()\n\t{\n\t\tif(GameControl.instance.isGameRunning)\n\t\t{\n\t\t\tcameraObj.transform.position = Vector3.MoveTowards(\n\t\t\t\tcameraObj.transform.position, cameraDestination, moveSpeed*Time.fixedDeltaTime);\n\t\t\tGameControl.instance.slingObj.offsetY = Mathf.MoveTowards(\n\t\t\t\tGameControl.instance.slingObj.offsetY, slingPosYOffsetDestination, moveSpeed*Time.fixedDeltaTime);\n\t\t}\n\t\t\n\t}\n\n\tpublic void MoveUp()\n\t{\n\t\tBackgroundMoveUp();\n\t\tSetCameraMoveDestination();\n\t\tSetSlingMoveDestination();\n\t}\n\n\tprivate void SetCameraMoveDestination()\n\t{\n\t\tcameraDestination = cameraObj.transform.position;\n\t\tcameraDestination.y += pieceSize;\n\t}\n\n\tprivate void SetSlingMoveDestination()\n\t{\n\t\tslingPosYOffsetDestination = GameControl.instance.slingObj.offsetY;\n\t\tslingPosYOffsetDestination += pieceSize;\n\t}\n\n\tprivate void BackgroundMoveUp()\n\t{\n\t\tVector3 posSkyObj_1 = skyObj_1.transform.position;\n\t\tVector3 posSkyObj_2 = skyObj_2.transform.position;\n\t\tVector3 posCamera = cameraObj.transform.position;\n\n\t\tif(posSkyObj_1.y < posSkyObj_2.y)\n\t\t{\n\t\t\tif(posCamera.y - posSkyObj_2.y >= 0)\n\t\t\t{\n\t\t\t\tposSkyObj_1.y += 2 * backgroundHeight;\n\t\t\t\tskyObj_1.transform.position = posSkyObj_1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(posCamera.y - posSkyObj_1.y >= 0)\n\t\t\t{\n\t\t\t\tposSkyObj_2.y += 2 * backgroundHeight;\n\t\t\t\tskyObj_2.transform.position = posSkyObj_2;\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/Scripts/PiecePool.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1420,
						"regions":
						{
						},
						"selection":
						[
							[
								1289,
								1289
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"1297,1308": "å½åä¸ä¸æä¸­ä¸å­å¨åç§°âtopPieceIdxâ",
								"26,31": "ä¸éè¦ç using æä»¤ã"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/Scripts/Utilities/Extension.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1260,
						"regions":
						{
						},
						"selection":
						[
							[
								1028,
								1028
							]
						],
						"settings":
						{
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"26,31": "ä¸éè¦ç using æä»¤ã",
								"916,920": "ä½¿ç¨äºæªèµå¼çå±é¨åéâposYâ",
								"98,103": "ä¸éè¦ç using æä»¤ã"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 117.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/Scripts/Piece.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5247,
						"regions":
						{
						},
						"selection":
						[
							[
								116,
								116
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"26,31": "ä¸éè¦ç using æä»¤ã",
								"5251,5252": "å½åä¸ä¸æä¸­ä¸å­å¨åç§°âmâ"
							},
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Piece : MonoBehaviour\n{\n\n    public struct StackStatus\n    {\n        public bool isStackSuccessful;\n        public int fallenSide;\n        public bool isDeadCenter;\n    }\n    public StackStatus stackStatus;\n\n    public bool isHooked = false;\n    public bool isStacked = true;\n    public float deadCenterRange = 0.15f;\n\n\tprivate Rigidbody2D rb2d;\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        rb2d = GetComponent<Rigidbody2D>();\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n    \tif(isHooked)\n    \t{\n\t        if(Input.GetKeyDown(\"space\"))\n\t        {\n\t        \ttransform.parent = null;\n                Vector3 p = transform.position;\n                p.z = 0;\n                transform.position = p;\n\t        \ttransform.rotation = Quaternion.Euler(0,0,0);\n\t        \trb2d.isKinematic = false;\n\t        \tisHooked = false;\n\t        }\n    \t}\n    }\n\n    void OnCollisionEnter2D()\n    {\n        if(!isStacked)\n        {\n            GameControl.instance.OnPieceStacking();\n            rb2d.isKinematic = true;\n            rb2d.velocity = Vector3.zero;\n            parent2Column();        \n        }\n    }\n\n    void parent2Column()\n    {\n        transform.SetParent(GameControl.instance.columnObj.transform, true);\n        // set the rotation for subObject using this way\n        transform.localEulerAngles = Vector3.zero;\n        rb2d.angularVelocity = 0;\n    }\n\n    void OnCollisionExit2D(Collision2D ctl)\n    {\n        if(!isStacked && ctl.collider.gameObject.tag == \"Piece\")\n        {\n            if(checkIfCanStack(ctl))\n            {\n                stackStatus.isStackSuccessful = true;\n                GameControl.instance.AfterPieceStackingSuccessfully(stackStatus.isDeadCenter);\n            }\n            else\n            {\n                stackStatus.isStackSuccessful = false;\n                GameControl.instance.AfterPieceStackingFailed(stackStatus.fallenSide);\n                transform.position = new Vector3(0, -10f, 0);\n            }\n        }\n        isStacked = true;\n    }\n\n    private bool checkIfCanStack(Collision2D ctl)\n    {\n        float topPiecePosX = ctl.collider.transform.localPosition.x;\n        float dropPiecePosX = ctl.otherCollider.transform.localPosition.x;\n        float deltaX = dropPiecePosX - topPiecePosX;\n        float absDeltaX = Mathf.Abs(deltaX);\n        \n        if(absDeltaX < 0.5)\n        {\n            checkIfDeadCenter(absDeltaX, topPiecePosX, ctl.otherCollider);\n            Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n                + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop true\");\n            return true;\n        }\n        else \n        {\n            checkFallenSide(deltaX);\n            Debug.Log(ctl.collider.gameObject.name + \"  \" + ctl.collider.transform.localPosition.x + \" | \" \n                + ctl.otherCollider.gameObject.name + \"  \" + ctl.otherCollider.transform.localPosition.x + \" || \" + \"drop false\");\n            return false;\n        }\n    }\n\n    private void checkIfDeadCenter(float absDeltaX, float topPiecePosX, Collider2D other)\n    {\n        if(absDeltaX < deadCenterRange)\n        {\n            stackStatus.isDeadCenter = true;\n            Vector3 pos = other.transform.localPosition;\n            pos.x = topPiecePosX;\n            other.transform.localPosition = pos;\n        }\n        else\n        {\n            stackStatus.isDeadCenter = false;\n        }\n    }\n\n    private void checkFallenSide(float deltaX)\n    {\n        if(deltaX > 0)\n        {\n            stackStatus.fallenSide = 1;\n        }\n        else\n        {\n            stackStatus.fallenSide = -1;\n        }\n        // Debug.Log(\"fallen side = \" + stackStatus.fallenSide);\n    }\n\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"revert_to_scratch": true,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"file": "Assets/Scripts/ParticleControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1440,
						"regions":
						{
						},
						"selection":
						[
							[
								715,
								715
							]
						],
						"settings":
						{
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"1264,1267": "å½åä¸ä¸æä¸­ä¸å­å¨åç§°âposâ",
								"26,31": "ä¸éè¦ç using æä»¤ã"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 64.0,
						"translation.y": 145.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/Scripts/ColumnSwinging.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3519,
						"regions":
						{
						},
						"selection":
						[
							[
								2149,
								2149
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"in_converting": true,
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"26,31": "ä¸éè¦ç using æä»¤ã",
								"3200,3216": "'âColumnSwinging.GetCenterPostion()â: å¹¶éææçä»£ç è·¯å¾é½è¿åå¼",
								"79,84": "ä¸éè¦ç using æä»¤ã"
							},
							"origin_content": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ColumnSwinging : MonoBehaviour\n{\n\n\tpublic int totalStacked;\n\tpublic float swingSpeed;\n\tpublic float maxAngle;\n\tpublic int swinger;\n\n\tpublic float amplitudeMove = 0.5f;\n\tpublic float amplitudeRotate = 1f;\n\n\tpublic Rigidbody2D rb2d;\n\n\tprivate float maxSwingingAngle = 5f;\n\tprivate float minSwingingAngle = -5f;\n\tprivate float angle;\n\tprivate Vector3 pos;\n\n\tint stackPlacement;\n\tbool rotateRight;\n\n\tvoid Start()\n\t{\n\t\tangle = 0;\n\t\trb2d = GetComponent<Rigidbody2D>();\n\t}\n\n\tbool IsColumnShouldRotate()\n\t{\n\t\tif(GameControl.instance.gameStatus != GameControl.GameStatus.GAME_OVER\n\t\t\t&& GameControl.instance.gameStatus != GameControl.GameStatus.GAME_START)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tvoid FixedUpdate()\n\t{\n\t\tif(IsColumnShouldRotate())\n\t\t{\n\t\t\t// transform.position = new Vector3(Mathf.PingPong(Time.time*speed, 2), transform.position.y, transform.position.z);\n\t\t\trb2d.velocity = new Vector2(Mathf.Cos(Time.time)*amplitudeMove, 0);\n\t\t\t// transform.position = new Vector3(Mathf.Cos(Time.time)*amplitudeMove, transform.position.y, transform.position.z);\n\t\t\ttransform.rotation = Quaternion.Euler(0,0,-Mathf.Sin(Time.time)*amplitudeRotate);\n\t\t\tDebug.DrawLine (new Vector3(0,-30,0), new Vector3(0,30,0),Color.red);\n\t\t\tDebug.DrawLine (new Vector3(transform.position.x,-30,0), new Vector3(transform.position.x,30,0),Color.yellow);\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\trb2d.velocity = Vector2.zero;\n\t\t}\n\t}\n\n\tpublic void getAmplitudeMove()\n\t{\n\t\t\n\t}\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"revert_to_scratch": false,
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Assets/Scripts/Utilities/DoTweenControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3241,
						"regions":
						{
						},
						"selection":
						[
							[
								461,
								461
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"is_init_dirty_state": true,
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"2391,2393": "'âTransformâä¸åå«âDORotateâçå®ä¹ï¼å¹¶ä¸æä½³æ©å±æ¹æ³éè½½âDOTweenModulePhysics.DORotate(Rigidbody, Vector3, float, RotateMode)âéè¦ç±»åä¸ºâRigidbodyâçæ¥æ¶å¨",
								"2569,2571": "'âTransformâä¸åå«âDORotateâçå®ä¹ï¼å¹¶ä¸æä½³æ©å±æ¹æ³éè½½âDOTweenModulePhysics.DORotate(Rigidbody, Vector3, float, RotateMode)âéè¦ç±»åä¸ºâRigidbodyâçæ¥æ¶å¨",
								"26,31": "ä¸éè¦ç using æä»¤ã"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Assets/Scripts/Utilities/Timer.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3694,
						"regions":
						{
						},
						"selection":
						[
							[
								3153,
								3153
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"oops":
							{
								"0,5": "ä¸éè¦ç using æä»¤ã",
								"101,114": "å½åç©ºé´â<global namespace>âå·²ç»åå«âCompleteEventâçå®ä¹",
								"1049,1060": "å¨âTimer.updateEventâåâTimer.updateEventâä¹é´å·æäºä¹æ§",
								"1080,1105": "å¨âTimer.isTimerDestoryAfterTimingâåâTimer.isTimerDestoryAfterTimingâä¹é´å·æäºä¹æ§",
								"1122,1139": "å¨âTimer.isIgnoreTimeScaleâåâTimer.isIgnoreTimeScaleâä¹é´å·æäºä¹æ§",
								"1164,1173": "å¨âTimer.isRepeateâåâTimer.isRepeateâä¹é´å·æäºä¹æ§",
								"1191,1205": "å¨âTimer.timerStartTimeâåâTimer.timerStartTimeâä¹é´å·æäºä¹æ§",
								"1208,1213": "å¨âTimer.Time_âåâTimer.Time_âä¹é´å·æäºä¹æ§",
								"1217,1228": "å¨âTimer.timerOffsetâåâTimer.timerOffsetâä¹é´å·æäºä¹æ§",
								"1236,1248": "å¨âTimer.isTimerStartâåâTimer.isTimerStartâä¹é´å·æäºä¹æ§",
								"1259,1267": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"1342,1353": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâcreateTimerâçå·æç¸ååæ°ç±»åçæå",
								"139,150": "å½åç©ºé´â<global namespace>âå·²ç»åå«âUpdateEventâçå®ä¹",
								"1538,1544": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâUpdateâçå·æç¸ååæ°ç±»åçæå",
								"1564,1572": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"1593,1600": "å¨âTimer.nowTimeâåâTimer.nowTimeâä¹é´å·æäºä¹æ§",
								"1603,1608": "å¨âTimer.Time_âåâTimer.Time_âä¹é´å·æäºä¹æ§",
								"1611,1622": "å¨âTimer.timerOffsetâåâTimer.timerOffsetâä¹é´å·æäºä¹æ§",
								"1633,1636": "å¨âTimer.nowâåâTimer.nowâä¹é´å·æäºä¹æ§",
								"1639,1646": "å¨âTimer.nowTimeâåâTimer.nowTimeâä¹é´å·æäºä¹æ§",
								"1649,1663": "å¨âTimer.timerStartTimeâåâTimer.timerStartTimeâä¹é´å·æäºä¹æ§",
								"1678,1689": "å¨âTimer.updateEventâåâTimer.updateEventâä¹é´å·æäºä¹æ§",
								"1720,1731": "ä¸å¯è°ç¨çæåâTimer.updateEventâä¸è½åæ¹æ³ä¸æ ·ä½¿ç¨ã",
								"1746,1749": "å¨âTimer.nowâåâTimer.nowâä¹é´å·æäºä¹æ§",
								"175,180": "å½åç©ºé´â<global namespace>âå·²ç»åå«âTimerâçå®ä¹",
								"1750,1761": "å¨âTimer.timerTargetâåâTimer.timerTargetâä¹é´å·æäºä¹æ§",
								"1788,1791": "å¨âTimer.nowâåâTimer.nowâä¹é´å·æäºä¹æ§",
								"1794,1805": "å¨âTimer.timerTargetâåâTimer.timerTargetâä¹é´å·æäºä¹æ§",
								"1831,1847": "å¨âTimer.onTimerCompletedâåâTimer.onTimerCompletedâä¹é´å·æäºä¹æ§",
								"1868,1884": "ä¸å¯è°ç¨çæåâTimer.onTimerCompletedâä¸è½åæ¹æ³ä¸æ ·ä½¿ç¨ã",
								"1907,1916": "å¨âTimer.isRepeateâåâTimer.isRepeateâä¹é´å·æäºä¹æ§",
								"1938,1950": "ä»¥ä¸æ¹æ³æå±æ§ä¹é´çè°ç¨å·æäºä¹æ§:âTimer.RestartTimer()âåâTimer.RestartTimer()â",
								"1967,1992": "å¨âTimer.isTimerDestoryAfterTimingâåâTimer.isTimerDestoryAfterTimingâä¹é´å·æäºä¹æ§",
								"2005,2012": "ä»¥ä¸æ¹æ³æå±æ§ä¹é´çè°ç¨å·æäºä¹æ§:âTimer.Destroy()âåâTimer.Destroy()â",
								"2061,2072": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâGetLeftTimeâçå·æç¸ååæ°ç±»åçæå",
								"2105,2116": "å¨âTimer.timerTargetâåâTimer.timerTargetâä¹é´å·æäºä¹æ§",
								"2119,2122": "å¨âTimer.nowâåâTimer.nowâä¹é´å·æäºä¹æ§",
								"2127,2138": "å¨âTimer.timerTargetâåâTimer.timerTargetâä¹é´å·æäºä¹æ§",
								"2157,2175": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâOnApplicationPauseâçå·æç¸ååæ°ç±»åçæå",
								"2221,2231": "ä»¥ä¸æ¹æ³æå±æ§ä¹é´çè°ç¨å·æäºä¹æ§:âTimer.PauseTimer()âåâTimer.PauseTimer()â",
								"2251,2264": "ä»¥ä¸æ¹æ³æå±æ§ä¹é´çè°ç¨å·æäºä¹æ§:âTimer.ContinueTimer()âåâTimer.ContinueTimer()â",
								"2291,2301": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâPauseTimerâçå·æç¸ååæ°ç±»åçæå",
								"2322,2332": "å¨âTimer.isTimerEndâåâTimer.isTimerEndâä¹é´å·æäºä¹æ§",
								"2360,2365": "å¨âTimer.isLogâåâTimer.isLogâä¹é´å·æäºä¹æ§",
								"2461,2469": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"2491,2502": "å¨âTimer.timerOffsetâåâTimer.timerOffsetâä¹é´å·æäºä¹æ§",
								"2505,2510": "å¨âTimer.Time_âåâTimer.Time_âä¹é´å·æäºä¹æ§",
								"2545,2558": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâContinueTimerâçå·æç¸ååæ°ç±»åçæå",
								"2579,2589": "å¨âTimer.isTimerEndâåâTimer.isTimerEndâä¹é´å·æäºä¹æ§",
								"26,31": "ä¸éè¦ç using æä»¤ã",
								"2617,2622": "å¨âTimer.isLogâåâTimer.isLogâä¹é´å·æäºä¹æ§",
								"2726,2734": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"2766,2777": "å¨âTimer.timerOffsetâåâTimer.timerOffsetâä¹é´å·æäºä¹æ§",
								"2780,2785": "å¨âTimer.Time_âåâTimer.Time_âä¹é´å·æäºä¹æ§",
								"2788,2799": "å¨âTimer.timerOffsetâåâTimer.timerOffsetâä¹é´å·æäºä¹æ§",
								"2817,2825": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"2881,2893": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâRestartTimerâçå·æç¸ååæ°ç±»åçæå",
								"2907,2921": "å¨âTimer.timerStartTimeâåâTimer.timerStartTimeâä¹é´å·æäºä¹æ§",
								"2924,2929": "å¨âTimer.Time_âåâTimer.Time_âä¹é´å·æäºä¹æ§",
								"2936,2947": "å¨âTimer.timerOffsetâåâTimer.timerOffsetâä¹é´å·æäºä¹æ§",
								"2961,2973": "å¨âTimer.isTimerStartâåâTimer.isTimerStartâä¹é´å·æäºä¹æ§",
								"2990,2998": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"3212,3226": "å¨âTimer.timerStartTimeâåâTimer.timerStartTimeâä¹é´å·æäºä¹æ§",
								"3229,3234": "å¨âTimer.Time_âåâTimer.Time_âä¹é´å·æäºä¹æ§",
								"3244,3255": "å¨âTimer.timerOffsetâåâTimer.timerOffsetâä¹é´å·æäºä¹æ§",
								"3269,3281": "å¨âTimer.isTimerStartâåâTimer.isTimerStartâä¹é´å·æäºä¹æ§",
								"3298,3306": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"3338,3357": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâincreaseTimerTargetâçå·æç¸ååæ°ç±»åçæå",
								"3392,3403": "å¨âTimer.timerTargetâåâTimer.timerTargetâä¹é´å·æäºä¹æ§",
								"3447,3454": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâDestroyâçå·æç¸ååæ°ç±»åçæå",
								"3468,3480": "å¨âTimer.isTimerStartâåâTimer.isTimerStartâä¹é´å·æäºä¹æ§",
								"3495,3503": "å¨âTimer.isTimingâåâTimer.isTimingâä¹é´å·æäºä¹æ§",
								"3518,3528": "å¨âTimer.isTimerEndâåâTimer.isTimerEndâä¹é´å·æäºä¹æ§",
								"3545,3570": "å¨âTimer.isTimerDestoryAfterTimingâåâTimer.isTimerDestoryAfterTimingâä¹é´å·æäºä¹æ§",
								"655,672": "å¨âTimer.isIgnoreTimeScaleâåâTimer.isIgnoreTimeScaleâä¹é´å·æäºä¹æ§",
								"732,743": "ç±»åâTimerâå·²å®ä¹äºä¸ä¸ªåä¸ºâstartTimingâçå·æç¸ååæ°ç±»åçæå",
								"918,929": "å¨âTimer.timerTargetâåâTimer.timerTargetâä¹é´å·æäºä¹æ§",
								"981,997": "å¨âTimer.onTimerCompletedâåâTimer.onTimerCompletedâä¹é´å·æäºä¹æ§"
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3611.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Assets/Scripts/ComboControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1777,
						"regions":
						{
						},
						"selection":
						[
							[
								1145,
								1145
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 37.0
	},
	"input":
	{
		"height": 50.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.477971043626,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 157.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.variable_get":
	{
		"height": 157.0
	},
	"pinned_build_system": "",
	"project": "citybloxxDemo.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Remote Edit: Open Remote File Prompt"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 184.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
